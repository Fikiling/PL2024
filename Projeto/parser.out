Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> input
Rule 1     input -> input linha
Rule 2     input -> empty
Rule 3     linha -> elem
Rule 4     linha -> 2PONTOS funcao input PONTOVIRGULA
Rule 5     linha -> condicional
Rule 6     linha -> ciclo
Rule 7     linha -> variaveis
Rule 8     funcao -> FUNCAO
Rule 9     elem -> NUM
Rule 10    elem -> operador
Rule 11    elem -> POINT
Rule 12    elem -> PRINTSTRING
Rule 13    elem -> SWAP
Rule 14    elem -> CR
Rule 15    elem -> EMIT
Rule 16    elem -> CHAR
Rule 17    elem -> SPACES
Rule 18    elem -> SPACE
Rule 19    elem -> KEY
Rule 20    elem -> DUP
Rule 21    elem -> 2DUP
Rule 22    elem -> DROP
Rule 23    elem -> I_COUNTER
Rule 24    elem -> ID
Rule 25    operador -> SOMA
Rule 26    operador -> SUBTRACAO
Rule 27    operador -> DIVISAO
Rule 28    operador -> MULTIPLICACAO
Rule 29    operador -> RESTO
Rule 30    operador -> POTENCIA
Rule 31    operador -> DIVIDE_BY_2
Rule 32    operador -> EQUAL
Rule 33    operador -> SUP
Rule 34    operador -> SUPEQUAL
Rule 35    operador -> INF
Rule 36    operador -> INFEQUAL
Rule 37    condicional -> IF input ELSE input THEN input
Rule 38    condicional -> IF input THEN input
Rule 39    ciclo -> DO input LOOP
Rule 40    variaveis -> VAR_DECLARACAO
Rule 41    variaveis -> VAR_ATRIBUICAO
Rule 42    variaveis -> VAR_CHAMADA
Rule 43    empty -> <empty>

Terminals, with rules where they appear

2DUP                 : 21
2PONTOS              : 4
CHAR                 : 16
CR                   : 14
DIVIDE_BY_2          : 31
DIVISAO              : 27
DO                   : 39
DROP                 : 22
DUP                  : 20
ELSE                 : 37
EMIT                 : 15
EQUAL                : 32
FUNCAO               : 8
ID                   : 24
IF                   : 37 38
INF                  : 35
INFEQUAL             : 36
I_COUNTER            : 23
KEY                  : 19
LOOP                 : 39
MULTIPLICACAO        : 28
NUM                  : 9
POINT                : 11
PONTOVIRGULA         : 4
POTENCIA             : 30
PRINTSTRING          : 12
RESTO                : 29
SOMA                 : 25
SPACE                : 18
SPACES               : 17
SUBTRACAO            : 26
SUP                  : 33
SUPEQUAL             : 34
SWAP                 : 13
THEN                 : 37 38
VAR_ATRIBUICAO       : 41
VAR_CHAMADA          : 42
VAR_DECLARACAO       : 40
error                : 

Nonterminals, with rules where they appear

ciclo                : 6
condicional          : 5
elem                 : 3
empty                : 2
funcao               : 4
input                : 1 4 37 37 37 38 38 39 0
linha                : 1
operador             : 10
variaveis            : 7

Parsing method: LALR

state 0

    (0) S' -> . input
    (1) input -> . input linha
    (2) input -> . empty
    (43) empty -> .

    2PONTOS         reduce using rule 43 (empty -> .)
    NUM             reduce using rule 43 (empty -> .)
    POINT           reduce using rule 43 (empty -> .)
    PRINTSTRING     reduce using rule 43 (empty -> .)
    SWAP            reduce using rule 43 (empty -> .)
    CR              reduce using rule 43 (empty -> .)
    EMIT            reduce using rule 43 (empty -> .)
    CHAR            reduce using rule 43 (empty -> .)
    SPACES          reduce using rule 43 (empty -> .)
    SPACE           reduce using rule 43 (empty -> .)
    KEY             reduce using rule 43 (empty -> .)
    DUP             reduce using rule 43 (empty -> .)
    2DUP            reduce using rule 43 (empty -> .)
    DROP            reduce using rule 43 (empty -> .)
    I_COUNTER       reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    VAR_DECLARACAO  reduce using rule 43 (empty -> .)
    VAR_ATRIBUICAO  reduce using rule 43 (empty -> .)
    VAR_CHAMADA     reduce using rule 43 (empty -> .)
    SOMA            reduce using rule 43 (empty -> .)
    SUBTRACAO       reduce using rule 43 (empty -> .)
    DIVISAO         reduce using rule 43 (empty -> .)
    MULTIPLICACAO   reduce using rule 43 (empty -> .)
    RESTO           reduce using rule 43 (empty -> .)
    POTENCIA        reduce using rule 43 (empty -> .)
    DIVIDE_BY_2     reduce using rule 43 (empty -> .)
    EQUAL           reduce using rule 43 (empty -> .)
    SUP             reduce using rule 43 (empty -> .)
    SUPEQUAL        reduce using rule 43 (empty -> .)
    INF             reduce using rule 43 (empty -> .)
    INFEQUAL        reduce using rule 43 (empty -> .)
    $end            reduce using rule 43 (empty -> .)

    input                          shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> input .
    (1) input -> input . linha
    (3) linha -> . elem
    (4) linha -> . 2PONTOS funcao input PONTOVIRGULA
    (5) linha -> . condicional
    (6) linha -> . ciclo
    (7) linha -> . variaveis
    (9) elem -> . NUM
    (10) elem -> . operador
    (11) elem -> . POINT
    (12) elem -> . PRINTSTRING
    (13) elem -> . SWAP
    (14) elem -> . CR
    (15) elem -> . EMIT
    (16) elem -> . CHAR
    (17) elem -> . SPACES
    (18) elem -> . SPACE
    (19) elem -> . KEY
    (20) elem -> . DUP
    (21) elem -> . 2DUP
    (22) elem -> . DROP
    (23) elem -> . I_COUNTER
    (24) elem -> . ID
    (37) condicional -> . IF input ELSE input THEN input
    (38) condicional -> . IF input THEN input
    (39) ciclo -> . DO input LOOP
    (40) variaveis -> . VAR_DECLARACAO
    (41) variaveis -> . VAR_ATRIBUICAO
    (42) variaveis -> . VAR_CHAMADA
    (25) operador -> . SOMA
    (26) operador -> . SUBTRACAO
    (27) operador -> . DIVISAO
    (28) operador -> . MULTIPLICACAO
    (29) operador -> . RESTO
    (30) operador -> . POTENCIA
    (31) operador -> . DIVIDE_BY_2
    (32) operador -> . EQUAL
    (33) operador -> . SUP
    (34) operador -> . SUPEQUAL
    (35) operador -> . INF
    (36) operador -> . INFEQUAL

    2PONTOS         shift and go to state 5
    NUM             shift and go to state 9
    POINT           shift and go to state 11
    PRINTSTRING     shift and go to state 12
    SWAP            shift and go to state 13
    CR              shift and go to state 14
    EMIT            shift and go to state 15
    CHAR            shift and go to state 16
    SPACES          shift and go to state 17
    SPACE           shift and go to state 18
    KEY             shift and go to state 19
    DUP             shift and go to state 20
    2DUP            shift and go to state 21
    DROP            shift and go to state 22
    I_COUNTER       shift and go to state 23
    ID              shift and go to state 24
    IF              shift and go to state 25
    DO              shift and go to state 26
    VAR_DECLARACAO  shift and go to state 27
    VAR_ATRIBUICAO  shift and go to state 28
    VAR_CHAMADA     shift and go to state 29
    SOMA            shift and go to state 30
    SUBTRACAO       shift and go to state 31
    DIVISAO         shift and go to state 32
    MULTIPLICACAO   shift and go to state 33
    RESTO           shift and go to state 34
    POTENCIA        shift and go to state 35
    DIVIDE_BY_2     shift and go to state 36
    EQUAL           shift and go to state 37
    SUP             shift and go to state 38
    SUPEQUAL        shift and go to state 39
    INF             shift and go to state 40
    INFEQUAL        shift and go to state 41

    linha                          shift and go to state 3
    elem                           shift and go to state 4
    condicional                    shift and go to state 6
    ciclo                          shift and go to state 7
    variaveis                      shift and go to state 8
    operador                       shift and go to state 10

state 2

    (2) input -> empty .

    2PONTOS         reduce using rule 2 (input -> empty .)
    NUM             reduce using rule 2 (input -> empty .)
    POINT           reduce using rule 2 (input -> empty .)
    PRINTSTRING     reduce using rule 2 (input -> empty .)
    SWAP            reduce using rule 2 (input -> empty .)
    CR              reduce using rule 2 (input -> empty .)
    EMIT            reduce using rule 2 (input -> empty .)
    CHAR            reduce using rule 2 (input -> empty .)
    SPACES          reduce using rule 2 (input -> empty .)
    SPACE           reduce using rule 2 (input -> empty .)
    KEY             reduce using rule 2 (input -> empty .)
    DUP             reduce using rule 2 (input -> empty .)
    2DUP            reduce using rule 2 (input -> empty .)
    DROP            reduce using rule 2 (input -> empty .)
    I_COUNTER       reduce using rule 2 (input -> empty .)
    ID              reduce using rule 2 (input -> empty .)
    IF              reduce using rule 2 (input -> empty .)
    DO              reduce using rule 2 (input -> empty .)
    VAR_DECLARACAO  reduce using rule 2 (input -> empty .)
    VAR_ATRIBUICAO  reduce using rule 2 (input -> empty .)
    VAR_CHAMADA     reduce using rule 2 (input -> empty .)
    SOMA            reduce using rule 2 (input -> empty .)
    SUBTRACAO       reduce using rule 2 (input -> empty .)
    DIVISAO         reduce using rule 2 (input -> empty .)
    MULTIPLICACAO   reduce using rule 2 (input -> empty .)
    RESTO           reduce using rule 2 (input -> empty .)
    POTENCIA        reduce using rule 2 (input -> empty .)
    DIVIDE_BY_2     reduce using rule 2 (input -> empty .)
    EQUAL           reduce using rule 2 (input -> empty .)
    SUP             reduce using rule 2 (input -> empty .)
    SUPEQUAL        reduce using rule 2 (input -> empty .)
    INF             reduce using rule 2 (input -> empty .)
    INFEQUAL        reduce using rule 2 (input -> empty .)
    $end            reduce using rule 2 (input -> empty .)
    ELSE            reduce using rule 2 (input -> empty .)
    THEN            reduce using rule 2 (input -> empty .)
    LOOP            reduce using rule 2 (input -> empty .)
    PONTOVIRGULA    reduce using rule 2 (input -> empty .)


state 3

    (1) input -> input linha .

    2PONTOS         reduce using rule 1 (input -> input linha .)
    NUM             reduce using rule 1 (input -> input linha .)
    POINT           reduce using rule 1 (input -> input linha .)
    PRINTSTRING     reduce using rule 1 (input -> input linha .)
    SWAP            reduce using rule 1 (input -> input linha .)
    CR              reduce using rule 1 (input -> input linha .)
    EMIT            reduce using rule 1 (input -> input linha .)
    CHAR            reduce using rule 1 (input -> input linha .)
    SPACES          reduce using rule 1 (input -> input linha .)
    SPACE           reduce using rule 1 (input -> input linha .)
    KEY             reduce using rule 1 (input -> input linha .)
    DUP             reduce using rule 1 (input -> input linha .)
    2DUP            reduce using rule 1 (input -> input linha .)
    DROP            reduce using rule 1 (input -> input linha .)
    I_COUNTER       reduce using rule 1 (input -> input linha .)
    ID              reduce using rule 1 (input -> input linha .)
    IF              reduce using rule 1 (input -> input linha .)
    DO              reduce using rule 1 (input -> input linha .)
    VAR_DECLARACAO  reduce using rule 1 (input -> input linha .)
    VAR_ATRIBUICAO  reduce using rule 1 (input -> input linha .)
    VAR_CHAMADA     reduce using rule 1 (input -> input linha .)
    SOMA            reduce using rule 1 (input -> input linha .)
    SUBTRACAO       reduce using rule 1 (input -> input linha .)
    DIVISAO         reduce using rule 1 (input -> input linha .)
    MULTIPLICACAO   reduce using rule 1 (input -> input linha .)
    RESTO           reduce using rule 1 (input -> input linha .)
    POTENCIA        reduce using rule 1 (input -> input linha .)
    DIVIDE_BY_2     reduce using rule 1 (input -> input linha .)
    EQUAL           reduce using rule 1 (input -> input linha .)
    SUP             reduce using rule 1 (input -> input linha .)
    SUPEQUAL        reduce using rule 1 (input -> input linha .)
    INF             reduce using rule 1 (input -> input linha .)
    INFEQUAL        reduce using rule 1 (input -> input linha .)
    $end            reduce using rule 1 (input -> input linha .)
    ELSE            reduce using rule 1 (input -> input linha .)
    THEN            reduce using rule 1 (input -> input linha .)
    LOOP            reduce using rule 1 (input -> input linha .)
    PONTOVIRGULA    reduce using rule 1 (input -> input linha .)


state 4

    (3) linha -> elem .

    2PONTOS         reduce using rule 3 (linha -> elem .)
    NUM             reduce using rule 3 (linha -> elem .)
    POINT           reduce using rule 3 (linha -> elem .)
    PRINTSTRING     reduce using rule 3 (linha -> elem .)
    SWAP            reduce using rule 3 (linha -> elem .)
    CR              reduce using rule 3 (linha -> elem .)
    EMIT            reduce using rule 3 (linha -> elem .)
    CHAR            reduce using rule 3 (linha -> elem .)
    SPACES          reduce using rule 3 (linha -> elem .)
    SPACE           reduce using rule 3 (linha -> elem .)
    KEY             reduce using rule 3 (linha -> elem .)
    DUP             reduce using rule 3 (linha -> elem .)
    2DUP            reduce using rule 3 (linha -> elem .)
    DROP            reduce using rule 3 (linha -> elem .)
    I_COUNTER       reduce using rule 3 (linha -> elem .)
    ID              reduce using rule 3 (linha -> elem .)
    IF              reduce using rule 3 (linha -> elem .)
    DO              reduce using rule 3 (linha -> elem .)
    VAR_DECLARACAO  reduce using rule 3 (linha -> elem .)
    VAR_ATRIBUICAO  reduce using rule 3 (linha -> elem .)
    VAR_CHAMADA     reduce using rule 3 (linha -> elem .)
    SOMA            reduce using rule 3 (linha -> elem .)
    SUBTRACAO       reduce using rule 3 (linha -> elem .)
    DIVISAO         reduce using rule 3 (linha -> elem .)
    MULTIPLICACAO   reduce using rule 3 (linha -> elem .)
    RESTO           reduce using rule 3 (linha -> elem .)
    POTENCIA        reduce using rule 3 (linha -> elem .)
    DIVIDE_BY_2     reduce using rule 3 (linha -> elem .)
    EQUAL           reduce using rule 3 (linha -> elem .)
    SUP             reduce using rule 3 (linha -> elem .)
    SUPEQUAL        reduce using rule 3 (linha -> elem .)
    INF             reduce using rule 3 (linha -> elem .)
    INFEQUAL        reduce using rule 3 (linha -> elem .)
    $end            reduce using rule 3 (linha -> elem .)
    ELSE            reduce using rule 3 (linha -> elem .)
    THEN            reduce using rule 3 (linha -> elem .)
    LOOP            reduce using rule 3 (linha -> elem .)
    PONTOVIRGULA    reduce using rule 3 (linha -> elem .)


state 5

    (4) linha -> 2PONTOS . funcao input PONTOVIRGULA
    (8) funcao -> . FUNCAO

    FUNCAO          shift and go to state 43

    funcao                         shift and go to state 42

state 6

    (5) linha -> condicional .

    2PONTOS         reduce using rule 5 (linha -> condicional .)
    NUM             reduce using rule 5 (linha -> condicional .)
    POINT           reduce using rule 5 (linha -> condicional .)
    PRINTSTRING     reduce using rule 5 (linha -> condicional .)
    SWAP            reduce using rule 5 (linha -> condicional .)
    CR              reduce using rule 5 (linha -> condicional .)
    EMIT            reduce using rule 5 (linha -> condicional .)
    CHAR            reduce using rule 5 (linha -> condicional .)
    SPACES          reduce using rule 5 (linha -> condicional .)
    SPACE           reduce using rule 5 (linha -> condicional .)
    KEY             reduce using rule 5 (linha -> condicional .)
    DUP             reduce using rule 5 (linha -> condicional .)
    2DUP            reduce using rule 5 (linha -> condicional .)
    DROP            reduce using rule 5 (linha -> condicional .)
    I_COUNTER       reduce using rule 5 (linha -> condicional .)
    ID              reduce using rule 5 (linha -> condicional .)
    IF              reduce using rule 5 (linha -> condicional .)
    DO              reduce using rule 5 (linha -> condicional .)
    VAR_DECLARACAO  reduce using rule 5 (linha -> condicional .)
    VAR_ATRIBUICAO  reduce using rule 5 (linha -> condicional .)
    VAR_CHAMADA     reduce using rule 5 (linha -> condicional .)
    SOMA            reduce using rule 5 (linha -> condicional .)
    SUBTRACAO       reduce using rule 5 (linha -> condicional .)
    DIVISAO         reduce using rule 5 (linha -> condicional .)
    MULTIPLICACAO   reduce using rule 5 (linha -> condicional .)
    RESTO           reduce using rule 5 (linha -> condicional .)
    POTENCIA        reduce using rule 5 (linha -> condicional .)
    DIVIDE_BY_2     reduce using rule 5 (linha -> condicional .)
    EQUAL           reduce using rule 5 (linha -> condicional .)
    SUP             reduce using rule 5 (linha -> condicional .)
    SUPEQUAL        reduce using rule 5 (linha -> condicional .)
    INF             reduce using rule 5 (linha -> condicional .)
    INFEQUAL        reduce using rule 5 (linha -> condicional .)
    $end            reduce using rule 5 (linha -> condicional .)
    ELSE            reduce using rule 5 (linha -> condicional .)
    THEN            reduce using rule 5 (linha -> condicional .)
    LOOP            reduce using rule 5 (linha -> condicional .)
    PONTOVIRGULA    reduce using rule 5 (linha -> condicional .)


state 7

    (6) linha -> ciclo .

    2PONTOS         reduce using rule 6 (linha -> ciclo .)
    NUM             reduce using rule 6 (linha -> ciclo .)
    POINT           reduce using rule 6 (linha -> ciclo .)
    PRINTSTRING     reduce using rule 6 (linha -> ciclo .)
    SWAP            reduce using rule 6 (linha -> ciclo .)
    CR              reduce using rule 6 (linha -> ciclo .)
    EMIT            reduce using rule 6 (linha -> ciclo .)
    CHAR            reduce using rule 6 (linha -> ciclo .)
    SPACES          reduce using rule 6 (linha -> ciclo .)
    SPACE           reduce using rule 6 (linha -> ciclo .)
    KEY             reduce using rule 6 (linha -> ciclo .)
    DUP             reduce using rule 6 (linha -> ciclo .)
    2DUP            reduce using rule 6 (linha -> ciclo .)
    DROP            reduce using rule 6 (linha -> ciclo .)
    I_COUNTER       reduce using rule 6 (linha -> ciclo .)
    ID              reduce using rule 6 (linha -> ciclo .)
    IF              reduce using rule 6 (linha -> ciclo .)
    DO              reduce using rule 6 (linha -> ciclo .)
    VAR_DECLARACAO  reduce using rule 6 (linha -> ciclo .)
    VAR_ATRIBUICAO  reduce using rule 6 (linha -> ciclo .)
    VAR_CHAMADA     reduce using rule 6 (linha -> ciclo .)
    SOMA            reduce using rule 6 (linha -> ciclo .)
    SUBTRACAO       reduce using rule 6 (linha -> ciclo .)
    DIVISAO         reduce using rule 6 (linha -> ciclo .)
    MULTIPLICACAO   reduce using rule 6 (linha -> ciclo .)
    RESTO           reduce using rule 6 (linha -> ciclo .)
    POTENCIA        reduce using rule 6 (linha -> ciclo .)
    DIVIDE_BY_2     reduce using rule 6 (linha -> ciclo .)
    EQUAL           reduce using rule 6 (linha -> ciclo .)
    SUP             reduce using rule 6 (linha -> ciclo .)
    SUPEQUAL        reduce using rule 6 (linha -> ciclo .)
    INF             reduce using rule 6 (linha -> ciclo .)
    INFEQUAL        reduce using rule 6 (linha -> ciclo .)
    $end            reduce using rule 6 (linha -> ciclo .)
    ELSE            reduce using rule 6 (linha -> ciclo .)
    THEN            reduce using rule 6 (linha -> ciclo .)
    LOOP            reduce using rule 6 (linha -> ciclo .)
    PONTOVIRGULA    reduce using rule 6 (linha -> ciclo .)


state 8

    (7) linha -> variaveis .

    2PONTOS         reduce using rule 7 (linha -> variaveis .)
    NUM             reduce using rule 7 (linha -> variaveis .)
    POINT           reduce using rule 7 (linha -> variaveis .)
    PRINTSTRING     reduce using rule 7 (linha -> variaveis .)
    SWAP            reduce using rule 7 (linha -> variaveis .)
    CR              reduce using rule 7 (linha -> variaveis .)
    EMIT            reduce using rule 7 (linha -> variaveis .)
    CHAR            reduce using rule 7 (linha -> variaveis .)
    SPACES          reduce using rule 7 (linha -> variaveis .)
    SPACE           reduce using rule 7 (linha -> variaveis .)
    KEY             reduce using rule 7 (linha -> variaveis .)
    DUP             reduce using rule 7 (linha -> variaveis .)
    2DUP            reduce using rule 7 (linha -> variaveis .)
    DROP            reduce using rule 7 (linha -> variaveis .)
    I_COUNTER       reduce using rule 7 (linha -> variaveis .)
    ID              reduce using rule 7 (linha -> variaveis .)
    IF              reduce using rule 7 (linha -> variaveis .)
    DO              reduce using rule 7 (linha -> variaveis .)
    VAR_DECLARACAO  reduce using rule 7 (linha -> variaveis .)
    VAR_ATRIBUICAO  reduce using rule 7 (linha -> variaveis .)
    VAR_CHAMADA     reduce using rule 7 (linha -> variaveis .)
    SOMA            reduce using rule 7 (linha -> variaveis .)
    SUBTRACAO       reduce using rule 7 (linha -> variaveis .)
    DIVISAO         reduce using rule 7 (linha -> variaveis .)
    MULTIPLICACAO   reduce using rule 7 (linha -> variaveis .)
    RESTO           reduce using rule 7 (linha -> variaveis .)
    POTENCIA        reduce using rule 7 (linha -> variaveis .)
    DIVIDE_BY_2     reduce using rule 7 (linha -> variaveis .)
    EQUAL           reduce using rule 7 (linha -> variaveis .)
    SUP             reduce using rule 7 (linha -> variaveis .)
    SUPEQUAL        reduce using rule 7 (linha -> variaveis .)
    INF             reduce using rule 7 (linha -> variaveis .)
    INFEQUAL        reduce using rule 7 (linha -> variaveis .)
    $end            reduce using rule 7 (linha -> variaveis .)
    ELSE            reduce using rule 7 (linha -> variaveis .)
    THEN            reduce using rule 7 (linha -> variaveis .)
    LOOP            reduce using rule 7 (linha -> variaveis .)
    PONTOVIRGULA    reduce using rule 7 (linha -> variaveis .)


state 9

    (9) elem -> NUM .

    2PONTOS         reduce using rule 9 (elem -> NUM .)
    NUM             reduce using rule 9 (elem -> NUM .)
    POINT           reduce using rule 9 (elem -> NUM .)
    PRINTSTRING     reduce using rule 9 (elem -> NUM .)
    SWAP            reduce using rule 9 (elem -> NUM .)
    CR              reduce using rule 9 (elem -> NUM .)
    EMIT            reduce using rule 9 (elem -> NUM .)
    CHAR            reduce using rule 9 (elem -> NUM .)
    SPACES          reduce using rule 9 (elem -> NUM .)
    SPACE           reduce using rule 9 (elem -> NUM .)
    KEY             reduce using rule 9 (elem -> NUM .)
    DUP             reduce using rule 9 (elem -> NUM .)
    2DUP            reduce using rule 9 (elem -> NUM .)
    DROP            reduce using rule 9 (elem -> NUM .)
    I_COUNTER       reduce using rule 9 (elem -> NUM .)
    ID              reduce using rule 9 (elem -> NUM .)
    IF              reduce using rule 9 (elem -> NUM .)
    DO              reduce using rule 9 (elem -> NUM .)
    VAR_DECLARACAO  reduce using rule 9 (elem -> NUM .)
    VAR_ATRIBUICAO  reduce using rule 9 (elem -> NUM .)
    VAR_CHAMADA     reduce using rule 9 (elem -> NUM .)
    SOMA            reduce using rule 9 (elem -> NUM .)
    SUBTRACAO       reduce using rule 9 (elem -> NUM .)
    DIVISAO         reduce using rule 9 (elem -> NUM .)
    MULTIPLICACAO   reduce using rule 9 (elem -> NUM .)
    RESTO           reduce using rule 9 (elem -> NUM .)
    POTENCIA        reduce using rule 9 (elem -> NUM .)
    DIVIDE_BY_2     reduce using rule 9 (elem -> NUM .)
    EQUAL           reduce using rule 9 (elem -> NUM .)
    SUP             reduce using rule 9 (elem -> NUM .)
    SUPEQUAL        reduce using rule 9 (elem -> NUM .)
    INF             reduce using rule 9 (elem -> NUM .)
    INFEQUAL        reduce using rule 9 (elem -> NUM .)
    $end            reduce using rule 9 (elem -> NUM .)
    ELSE            reduce using rule 9 (elem -> NUM .)
    THEN            reduce using rule 9 (elem -> NUM .)
    LOOP            reduce using rule 9 (elem -> NUM .)
    PONTOVIRGULA    reduce using rule 9 (elem -> NUM .)


state 10

    (10) elem -> operador .

    2PONTOS         reduce using rule 10 (elem -> operador .)
    NUM             reduce using rule 10 (elem -> operador .)
    POINT           reduce using rule 10 (elem -> operador .)
    PRINTSTRING     reduce using rule 10 (elem -> operador .)
    SWAP            reduce using rule 10 (elem -> operador .)
    CR              reduce using rule 10 (elem -> operador .)
    EMIT            reduce using rule 10 (elem -> operador .)
    CHAR            reduce using rule 10 (elem -> operador .)
    SPACES          reduce using rule 10 (elem -> operador .)
    SPACE           reduce using rule 10 (elem -> operador .)
    KEY             reduce using rule 10 (elem -> operador .)
    DUP             reduce using rule 10 (elem -> operador .)
    2DUP            reduce using rule 10 (elem -> operador .)
    DROP            reduce using rule 10 (elem -> operador .)
    I_COUNTER       reduce using rule 10 (elem -> operador .)
    ID              reduce using rule 10 (elem -> operador .)
    IF              reduce using rule 10 (elem -> operador .)
    DO              reduce using rule 10 (elem -> operador .)
    VAR_DECLARACAO  reduce using rule 10 (elem -> operador .)
    VAR_ATRIBUICAO  reduce using rule 10 (elem -> operador .)
    VAR_CHAMADA     reduce using rule 10 (elem -> operador .)
    SOMA            reduce using rule 10 (elem -> operador .)
    SUBTRACAO       reduce using rule 10 (elem -> operador .)
    DIVISAO         reduce using rule 10 (elem -> operador .)
    MULTIPLICACAO   reduce using rule 10 (elem -> operador .)
    RESTO           reduce using rule 10 (elem -> operador .)
    POTENCIA        reduce using rule 10 (elem -> operador .)
    DIVIDE_BY_2     reduce using rule 10 (elem -> operador .)
    EQUAL           reduce using rule 10 (elem -> operador .)
    SUP             reduce using rule 10 (elem -> operador .)
    SUPEQUAL        reduce using rule 10 (elem -> operador .)
    INF             reduce using rule 10 (elem -> operador .)
    INFEQUAL        reduce using rule 10 (elem -> operador .)
    $end            reduce using rule 10 (elem -> operador .)
    ELSE            reduce using rule 10 (elem -> operador .)
    THEN            reduce using rule 10 (elem -> operador .)
    LOOP            reduce using rule 10 (elem -> operador .)
    PONTOVIRGULA    reduce using rule 10 (elem -> operador .)


state 11

    (11) elem -> POINT .

    2PONTOS         reduce using rule 11 (elem -> POINT .)
    NUM             reduce using rule 11 (elem -> POINT .)
    POINT           reduce using rule 11 (elem -> POINT .)
    PRINTSTRING     reduce using rule 11 (elem -> POINT .)
    SWAP            reduce using rule 11 (elem -> POINT .)
    CR              reduce using rule 11 (elem -> POINT .)
    EMIT            reduce using rule 11 (elem -> POINT .)
    CHAR            reduce using rule 11 (elem -> POINT .)
    SPACES          reduce using rule 11 (elem -> POINT .)
    SPACE           reduce using rule 11 (elem -> POINT .)
    KEY             reduce using rule 11 (elem -> POINT .)
    DUP             reduce using rule 11 (elem -> POINT .)
    2DUP            reduce using rule 11 (elem -> POINT .)
    DROP            reduce using rule 11 (elem -> POINT .)
    I_COUNTER       reduce using rule 11 (elem -> POINT .)
    ID              reduce using rule 11 (elem -> POINT .)
    IF              reduce using rule 11 (elem -> POINT .)
    DO              reduce using rule 11 (elem -> POINT .)
    VAR_DECLARACAO  reduce using rule 11 (elem -> POINT .)
    VAR_ATRIBUICAO  reduce using rule 11 (elem -> POINT .)
    VAR_CHAMADA     reduce using rule 11 (elem -> POINT .)
    SOMA            reduce using rule 11 (elem -> POINT .)
    SUBTRACAO       reduce using rule 11 (elem -> POINT .)
    DIVISAO         reduce using rule 11 (elem -> POINT .)
    MULTIPLICACAO   reduce using rule 11 (elem -> POINT .)
    RESTO           reduce using rule 11 (elem -> POINT .)
    POTENCIA        reduce using rule 11 (elem -> POINT .)
    DIVIDE_BY_2     reduce using rule 11 (elem -> POINT .)
    EQUAL           reduce using rule 11 (elem -> POINT .)
    SUP             reduce using rule 11 (elem -> POINT .)
    SUPEQUAL        reduce using rule 11 (elem -> POINT .)
    INF             reduce using rule 11 (elem -> POINT .)
    INFEQUAL        reduce using rule 11 (elem -> POINT .)
    $end            reduce using rule 11 (elem -> POINT .)
    ELSE            reduce using rule 11 (elem -> POINT .)
    THEN            reduce using rule 11 (elem -> POINT .)
    LOOP            reduce using rule 11 (elem -> POINT .)
    PONTOVIRGULA    reduce using rule 11 (elem -> POINT .)


state 12

    (12) elem -> PRINTSTRING .

    2PONTOS         reduce using rule 12 (elem -> PRINTSTRING .)
    NUM             reduce using rule 12 (elem -> PRINTSTRING .)
    POINT           reduce using rule 12 (elem -> PRINTSTRING .)
    PRINTSTRING     reduce using rule 12 (elem -> PRINTSTRING .)
    SWAP            reduce using rule 12 (elem -> PRINTSTRING .)
    CR              reduce using rule 12 (elem -> PRINTSTRING .)
    EMIT            reduce using rule 12 (elem -> PRINTSTRING .)
    CHAR            reduce using rule 12 (elem -> PRINTSTRING .)
    SPACES          reduce using rule 12 (elem -> PRINTSTRING .)
    SPACE           reduce using rule 12 (elem -> PRINTSTRING .)
    KEY             reduce using rule 12 (elem -> PRINTSTRING .)
    DUP             reduce using rule 12 (elem -> PRINTSTRING .)
    2DUP            reduce using rule 12 (elem -> PRINTSTRING .)
    DROP            reduce using rule 12 (elem -> PRINTSTRING .)
    I_COUNTER       reduce using rule 12 (elem -> PRINTSTRING .)
    ID              reduce using rule 12 (elem -> PRINTSTRING .)
    IF              reduce using rule 12 (elem -> PRINTSTRING .)
    DO              reduce using rule 12 (elem -> PRINTSTRING .)
    VAR_DECLARACAO  reduce using rule 12 (elem -> PRINTSTRING .)
    VAR_ATRIBUICAO  reduce using rule 12 (elem -> PRINTSTRING .)
    VAR_CHAMADA     reduce using rule 12 (elem -> PRINTSTRING .)
    SOMA            reduce using rule 12 (elem -> PRINTSTRING .)
    SUBTRACAO       reduce using rule 12 (elem -> PRINTSTRING .)
    DIVISAO         reduce using rule 12 (elem -> PRINTSTRING .)
    MULTIPLICACAO   reduce using rule 12 (elem -> PRINTSTRING .)
    RESTO           reduce using rule 12 (elem -> PRINTSTRING .)
    POTENCIA        reduce using rule 12 (elem -> PRINTSTRING .)
    DIVIDE_BY_2     reduce using rule 12 (elem -> PRINTSTRING .)
    EQUAL           reduce using rule 12 (elem -> PRINTSTRING .)
    SUP             reduce using rule 12 (elem -> PRINTSTRING .)
    SUPEQUAL        reduce using rule 12 (elem -> PRINTSTRING .)
    INF             reduce using rule 12 (elem -> PRINTSTRING .)
    INFEQUAL        reduce using rule 12 (elem -> PRINTSTRING .)
    $end            reduce using rule 12 (elem -> PRINTSTRING .)
    ELSE            reduce using rule 12 (elem -> PRINTSTRING .)
    THEN            reduce using rule 12 (elem -> PRINTSTRING .)
    LOOP            reduce using rule 12 (elem -> PRINTSTRING .)
    PONTOVIRGULA    reduce using rule 12 (elem -> PRINTSTRING .)


state 13

    (13) elem -> SWAP .

    2PONTOS         reduce using rule 13 (elem -> SWAP .)
    NUM             reduce using rule 13 (elem -> SWAP .)
    POINT           reduce using rule 13 (elem -> SWAP .)
    PRINTSTRING     reduce using rule 13 (elem -> SWAP .)
    SWAP            reduce using rule 13 (elem -> SWAP .)
    CR              reduce using rule 13 (elem -> SWAP .)
    EMIT            reduce using rule 13 (elem -> SWAP .)
    CHAR            reduce using rule 13 (elem -> SWAP .)
    SPACES          reduce using rule 13 (elem -> SWAP .)
    SPACE           reduce using rule 13 (elem -> SWAP .)
    KEY             reduce using rule 13 (elem -> SWAP .)
    DUP             reduce using rule 13 (elem -> SWAP .)
    2DUP            reduce using rule 13 (elem -> SWAP .)
    DROP            reduce using rule 13 (elem -> SWAP .)
    I_COUNTER       reduce using rule 13 (elem -> SWAP .)
    ID              reduce using rule 13 (elem -> SWAP .)
    IF              reduce using rule 13 (elem -> SWAP .)
    DO              reduce using rule 13 (elem -> SWAP .)
    VAR_DECLARACAO  reduce using rule 13 (elem -> SWAP .)
    VAR_ATRIBUICAO  reduce using rule 13 (elem -> SWAP .)
    VAR_CHAMADA     reduce using rule 13 (elem -> SWAP .)
    SOMA            reduce using rule 13 (elem -> SWAP .)
    SUBTRACAO       reduce using rule 13 (elem -> SWAP .)
    DIVISAO         reduce using rule 13 (elem -> SWAP .)
    MULTIPLICACAO   reduce using rule 13 (elem -> SWAP .)
    RESTO           reduce using rule 13 (elem -> SWAP .)
    POTENCIA        reduce using rule 13 (elem -> SWAP .)
    DIVIDE_BY_2     reduce using rule 13 (elem -> SWAP .)
    EQUAL           reduce using rule 13 (elem -> SWAP .)
    SUP             reduce using rule 13 (elem -> SWAP .)
    SUPEQUAL        reduce using rule 13 (elem -> SWAP .)
    INF             reduce using rule 13 (elem -> SWAP .)
    INFEQUAL        reduce using rule 13 (elem -> SWAP .)
    $end            reduce using rule 13 (elem -> SWAP .)
    ELSE            reduce using rule 13 (elem -> SWAP .)
    THEN            reduce using rule 13 (elem -> SWAP .)
    LOOP            reduce using rule 13 (elem -> SWAP .)
    PONTOVIRGULA    reduce using rule 13 (elem -> SWAP .)


state 14

    (14) elem -> CR .

    2PONTOS         reduce using rule 14 (elem -> CR .)
    NUM             reduce using rule 14 (elem -> CR .)
    POINT           reduce using rule 14 (elem -> CR .)
    PRINTSTRING     reduce using rule 14 (elem -> CR .)
    SWAP            reduce using rule 14 (elem -> CR .)
    CR              reduce using rule 14 (elem -> CR .)
    EMIT            reduce using rule 14 (elem -> CR .)
    CHAR            reduce using rule 14 (elem -> CR .)
    SPACES          reduce using rule 14 (elem -> CR .)
    SPACE           reduce using rule 14 (elem -> CR .)
    KEY             reduce using rule 14 (elem -> CR .)
    DUP             reduce using rule 14 (elem -> CR .)
    2DUP            reduce using rule 14 (elem -> CR .)
    DROP            reduce using rule 14 (elem -> CR .)
    I_COUNTER       reduce using rule 14 (elem -> CR .)
    ID              reduce using rule 14 (elem -> CR .)
    IF              reduce using rule 14 (elem -> CR .)
    DO              reduce using rule 14 (elem -> CR .)
    VAR_DECLARACAO  reduce using rule 14 (elem -> CR .)
    VAR_ATRIBUICAO  reduce using rule 14 (elem -> CR .)
    VAR_CHAMADA     reduce using rule 14 (elem -> CR .)
    SOMA            reduce using rule 14 (elem -> CR .)
    SUBTRACAO       reduce using rule 14 (elem -> CR .)
    DIVISAO         reduce using rule 14 (elem -> CR .)
    MULTIPLICACAO   reduce using rule 14 (elem -> CR .)
    RESTO           reduce using rule 14 (elem -> CR .)
    POTENCIA        reduce using rule 14 (elem -> CR .)
    DIVIDE_BY_2     reduce using rule 14 (elem -> CR .)
    EQUAL           reduce using rule 14 (elem -> CR .)
    SUP             reduce using rule 14 (elem -> CR .)
    SUPEQUAL        reduce using rule 14 (elem -> CR .)
    INF             reduce using rule 14 (elem -> CR .)
    INFEQUAL        reduce using rule 14 (elem -> CR .)
    $end            reduce using rule 14 (elem -> CR .)
    ELSE            reduce using rule 14 (elem -> CR .)
    THEN            reduce using rule 14 (elem -> CR .)
    LOOP            reduce using rule 14 (elem -> CR .)
    PONTOVIRGULA    reduce using rule 14 (elem -> CR .)


state 15

    (15) elem -> EMIT .

    2PONTOS         reduce using rule 15 (elem -> EMIT .)
    NUM             reduce using rule 15 (elem -> EMIT .)
    POINT           reduce using rule 15 (elem -> EMIT .)
    PRINTSTRING     reduce using rule 15 (elem -> EMIT .)
    SWAP            reduce using rule 15 (elem -> EMIT .)
    CR              reduce using rule 15 (elem -> EMIT .)
    EMIT            reduce using rule 15 (elem -> EMIT .)
    CHAR            reduce using rule 15 (elem -> EMIT .)
    SPACES          reduce using rule 15 (elem -> EMIT .)
    SPACE           reduce using rule 15 (elem -> EMIT .)
    KEY             reduce using rule 15 (elem -> EMIT .)
    DUP             reduce using rule 15 (elem -> EMIT .)
    2DUP            reduce using rule 15 (elem -> EMIT .)
    DROP            reduce using rule 15 (elem -> EMIT .)
    I_COUNTER       reduce using rule 15 (elem -> EMIT .)
    ID              reduce using rule 15 (elem -> EMIT .)
    IF              reduce using rule 15 (elem -> EMIT .)
    DO              reduce using rule 15 (elem -> EMIT .)
    VAR_DECLARACAO  reduce using rule 15 (elem -> EMIT .)
    VAR_ATRIBUICAO  reduce using rule 15 (elem -> EMIT .)
    VAR_CHAMADA     reduce using rule 15 (elem -> EMIT .)
    SOMA            reduce using rule 15 (elem -> EMIT .)
    SUBTRACAO       reduce using rule 15 (elem -> EMIT .)
    DIVISAO         reduce using rule 15 (elem -> EMIT .)
    MULTIPLICACAO   reduce using rule 15 (elem -> EMIT .)
    RESTO           reduce using rule 15 (elem -> EMIT .)
    POTENCIA        reduce using rule 15 (elem -> EMIT .)
    DIVIDE_BY_2     reduce using rule 15 (elem -> EMIT .)
    EQUAL           reduce using rule 15 (elem -> EMIT .)
    SUP             reduce using rule 15 (elem -> EMIT .)
    SUPEQUAL        reduce using rule 15 (elem -> EMIT .)
    INF             reduce using rule 15 (elem -> EMIT .)
    INFEQUAL        reduce using rule 15 (elem -> EMIT .)
    $end            reduce using rule 15 (elem -> EMIT .)
    ELSE            reduce using rule 15 (elem -> EMIT .)
    THEN            reduce using rule 15 (elem -> EMIT .)
    LOOP            reduce using rule 15 (elem -> EMIT .)
    PONTOVIRGULA    reduce using rule 15 (elem -> EMIT .)


state 16

    (16) elem -> CHAR .

    2PONTOS         reduce using rule 16 (elem -> CHAR .)
    NUM             reduce using rule 16 (elem -> CHAR .)
    POINT           reduce using rule 16 (elem -> CHAR .)
    PRINTSTRING     reduce using rule 16 (elem -> CHAR .)
    SWAP            reduce using rule 16 (elem -> CHAR .)
    CR              reduce using rule 16 (elem -> CHAR .)
    EMIT            reduce using rule 16 (elem -> CHAR .)
    CHAR            reduce using rule 16 (elem -> CHAR .)
    SPACES          reduce using rule 16 (elem -> CHAR .)
    SPACE           reduce using rule 16 (elem -> CHAR .)
    KEY             reduce using rule 16 (elem -> CHAR .)
    DUP             reduce using rule 16 (elem -> CHAR .)
    2DUP            reduce using rule 16 (elem -> CHAR .)
    DROP            reduce using rule 16 (elem -> CHAR .)
    I_COUNTER       reduce using rule 16 (elem -> CHAR .)
    ID              reduce using rule 16 (elem -> CHAR .)
    IF              reduce using rule 16 (elem -> CHAR .)
    DO              reduce using rule 16 (elem -> CHAR .)
    VAR_DECLARACAO  reduce using rule 16 (elem -> CHAR .)
    VAR_ATRIBUICAO  reduce using rule 16 (elem -> CHAR .)
    VAR_CHAMADA     reduce using rule 16 (elem -> CHAR .)
    SOMA            reduce using rule 16 (elem -> CHAR .)
    SUBTRACAO       reduce using rule 16 (elem -> CHAR .)
    DIVISAO         reduce using rule 16 (elem -> CHAR .)
    MULTIPLICACAO   reduce using rule 16 (elem -> CHAR .)
    RESTO           reduce using rule 16 (elem -> CHAR .)
    POTENCIA        reduce using rule 16 (elem -> CHAR .)
    DIVIDE_BY_2     reduce using rule 16 (elem -> CHAR .)
    EQUAL           reduce using rule 16 (elem -> CHAR .)
    SUP             reduce using rule 16 (elem -> CHAR .)
    SUPEQUAL        reduce using rule 16 (elem -> CHAR .)
    INF             reduce using rule 16 (elem -> CHAR .)
    INFEQUAL        reduce using rule 16 (elem -> CHAR .)
    $end            reduce using rule 16 (elem -> CHAR .)
    ELSE            reduce using rule 16 (elem -> CHAR .)
    THEN            reduce using rule 16 (elem -> CHAR .)
    LOOP            reduce using rule 16 (elem -> CHAR .)
    PONTOVIRGULA    reduce using rule 16 (elem -> CHAR .)


state 17

    (17) elem -> SPACES .

    2PONTOS         reduce using rule 17 (elem -> SPACES .)
    NUM             reduce using rule 17 (elem -> SPACES .)
    POINT           reduce using rule 17 (elem -> SPACES .)
    PRINTSTRING     reduce using rule 17 (elem -> SPACES .)
    SWAP            reduce using rule 17 (elem -> SPACES .)
    CR              reduce using rule 17 (elem -> SPACES .)
    EMIT            reduce using rule 17 (elem -> SPACES .)
    CHAR            reduce using rule 17 (elem -> SPACES .)
    SPACES          reduce using rule 17 (elem -> SPACES .)
    SPACE           reduce using rule 17 (elem -> SPACES .)
    KEY             reduce using rule 17 (elem -> SPACES .)
    DUP             reduce using rule 17 (elem -> SPACES .)
    2DUP            reduce using rule 17 (elem -> SPACES .)
    DROP            reduce using rule 17 (elem -> SPACES .)
    I_COUNTER       reduce using rule 17 (elem -> SPACES .)
    ID              reduce using rule 17 (elem -> SPACES .)
    IF              reduce using rule 17 (elem -> SPACES .)
    DO              reduce using rule 17 (elem -> SPACES .)
    VAR_DECLARACAO  reduce using rule 17 (elem -> SPACES .)
    VAR_ATRIBUICAO  reduce using rule 17 (elem -> SPACES .)
    VAR_CHAMADA     reduce using rule 17 (elem -> SPACES .)
    SOMA            reduce using rule 17 (elem -> SPACES .)
    SUBTRACAO       reduce using rule 17 (elem -> SPACES .)
    DIVISAO         reduce using rule 17 (elem -> SPACES .)
    MULTIPLICACAO   reduce using rule 17 (elem -> SPACES .)
    RESTO           reduce using rule 17 (elem -> SPACES .)
    POTENCIA        reduce using rule 17 (elem -> SPACES .)
    DIVIDE_BY_2     reduce using rule 17 (elem -> SPACES .)
    EQUAL           reduce using rule 17 (elem -> SPACES .)
    SUP             reduce using rule 17 (elem -> SPACES .)
    SUPEQUAL        reduce using rule 17 (elem -> SPACES .)
    INF             reduce using rule 17 (elem -> SPACES .)
    INFEQUAL        reduce using rule 17 (elem -> SPACES .)
    $end            reduce using rule 17 (elem -> SPACES .)
    ELSE            reduce using rule 17 (elem -> SPACES .)
    THEN            reduce using rule 17 (elem -> SPACES .)
    LOOP            reduce using rule 17 (elem -> SPACES .)
    PONTOVIRGULA    reduce using rule 17 (elem -> SPACES .)


state 18

    (18) elem -> SPACE .

    2PONTOS         reduce using rule 18 (elem -> SPACE .)
    NUM             reduce using rule 18 (elem -> SPACE .)
    POINT           reduce using rule 18 (elem -> SPACE .)
    PRINTSTRING     reduce using rule 18 (elem -> SPACE .)
    SWAP            reduce using rule 18 (elem -> SPACE .)
    CR              reduce using rule 18 (elem -> SPACE .)
    EMIT            reduce using rule 18 (elem -> SPACE .)
    CHAR            reduce using rule 18 (elem -> SPACE .)
    SPACES          reduce using rule 18 (elem -> SPACE .)
    SPACE           reduce using rule 18 (elem -> SPACE .)
    KEY             reduce using rule 18 (elem -> SPACE .)
    DUP             reduce using rule 18 (elem -> SPACE .)
    2DUP            reduce using rule 18 (elem -> SPACE .)
    DROP            reduce using rule 18 (elem -> SPACE .)
    I_COUNTER       reduce using rule 18 (elem -> SPACE .)
    ID              reduce using rule 18 (elem -> SPACE .)
    IF              reduce using rule 18 (elem -> SPACE .)
    DO              reduce using rule 18 (elem -> SPACE .)
    VAR_DECLARACAO  reduce using rule 18 (elem -> SPACE .)
    VAR_ATRIBUICAO  reduce using rule 18 (elem -> SPACE .)
    VAR_CHAMADA     reduce using rule 18 (elem -> SPACE .)
    SOMA            reduce using rule 18 (elem -> SPACE .)
    SUBTRACAO       reduce using rule 18 (elem -> SPACE .)
    DIVISAO         reduce using rule 18 (elem -> SPACE .)
    MULTIPLICACAO   reduce using rule 18 (elem -> SPACE .)
    RESTO           reduce using rule 18 (elem -> SPACE .)
    POTENCIA        reduce using rule 18 (elem -> SPACE .)
    DIVIDE_BY_2     reduce using rule 18 (elem -> SPACE .)
    EQUAL           reduce using rule 18 (elem -> SPACE .)
    SUP             reduce using rule 18 (elem -> SPACE .)
    SUPEQUAL        reduce using rule 18 (elem -> SPACE .)
    INF             reduce using rule 18 (elem -> SPACE .)
    INFEQUAL        reduce using rule 18 (elem -> SPACE .)
    $end            reduce using rule 18 (elem -> SPACE .)
    ELSE            reduce using rule 18 (elem -> SPACE .)
    THEN            reduce using rule 18 (elem -> SPACE .)
    LOOP            reduce using rule 18 (elem -> SPACE .)
    PONTOVIRGULA    reduce using rule 18 (elem -> SPACE .)


state 19

    (19) elem -> KEY .

    2PONTOS         reduce using rule 19 (elem -> KEY .)
    NUM             reduce using rule 19 (elem -> KEY .)
    POINT           reduce using rule 19 (elem -> KEY .)
    PRINTSTRING     reduce using rule 19 (elem -> KEY .)
    SWAP            reduce using rule 19 (elem -> KEY .)
    CR              reduce using rule 19 (elem -> KEY .)
    EMIT            reduce using rule 19 (elem -> KEY .)
    CHAR            reduce using rule 19 (elem -> KEY .)
    SPACES          reduce using rule 19 (elem -> KEY .)
    SPACE           reduce using rule 19 (elem -> KEY .)
    KEY             reduce using rule 19 (elem -> KEY .)
    DUP             reduce using rule 19 (elem -> KEY .)
    2DUP            reduce using rule 19 (elem -> KEY .)
    DROP            reduce using rule 19 (elem -> KEY .)
    I_COUNTER       reduce using rule 19 (elem -> KEY .)
    ID              reduce using rule 19 (elem -> KEY .)
    IF              reduce using rule 19 (elem -> KEY .)
    DO              reduce using rule 19 (elem -> KEY .)
    VAR_DECLARACAO  reduce using rule 19 (elem -> KEY .)
    VAR_ATRIBUICAO  reduce using rule 19 (elem -> KEY .)
    VAR_CHAMADA     reduce using rule 19 (elem -> KEY .)
    SOMA            reduce using rule 19 (elem -> KEY .)
    SUBTRACAO       reduce using rule 19 (elem -> KEY .)
    DIVISAO         reduce using rule 19 (elem -> KEY .)
    MULTIPLICACAO   reduce using rule 19 (elem -> KEY .)
    RESTO           reduce using rule 19 (elem -> KEY .)
    POTENCIA        reduce using rule 19 (elem -> KEY .)
    DIVIDE_BY_2     reduce using rule 19 (elem -> KEY .)
    EQUAL           reduce using rule 19 (elem -> KEY .)
    SUP             reduce using rule 19 (elem -> KEY .)
    SUPEQUAL        reduce using rule 19 (elem -> KEY .)
    INF             reduce using rule 19 (elem -> KEY .)
    INFEQUAL        reduce using rule 19 (elem -> KEY .)
    $end            reduce using rule 19 (elem -> KEY .)
    ELSE            reduce using rule 19 (elem -> KEY .)
    THEN            reduce using rule 19 (elem -> KEY .)
    LOOP            reduce using rule 19 (elem -> KEY .)
    PONTOVIRGULA    reduce using rule 19 (elem -> KEY .)


state 20

    (20) elem -> DUP .

    2PONTOS         reduce using rule 20 (elem -> DUP .)
    NUM             reduce using rule 20 (elem -> DUP .)
    POINT           reduce using rule 20 (elem -> DUP .)
    PRINTSTRING     reduce using rule 20 (elem -> DUP .)
    SWAP            reduce using rule 20 (elem -> DUP .)
    CR              reduce using rule 20 (elem -> DUP .)
    EMIT            reduce using rule 20 (elem -> DUP .)
    CHAR            reduce using rule 20 (elem -> DUP .)
    SPACES          reduce using rule 20 (elem -> DUP .)
    SPACE           reduce using rule 20 (elem -> DUP .)
    KEY             reduce using rule 20 (elem -> DUP .)
    DUP             reduce using rule 20 (elem -> DUP .)
    2DUP            reduce using rule 20 (elem -> DUP .)
    DROP            reduce using rule 20 (elem -> DUP .)
    I_COUNTER       reduce using rule 20 (elem -> DUP .)
    ID              reduce using rule 20 (elem -> DUP .)
    IF              reduce using rule 20 (elem -> DUP .)
    DO              reduce using rule 20 (elem -> DUP .)
    VAR_DECLARACAO  reduce using rule 20 (elem -> DUP .)
    VAR_ATRIBUICAO  reduce using rule 20 (elem -> DUP .)
    VAR_CHAMADA     reduce using rule 20 (elem -> DUP .)
    SOMA            reduce using rule 20 (elem -> DUP .)
    SUBTRACAO       reduce using rule 20 (elem -> DUP .)
    DIVISAO         reduce using rule 20 (elem -> DUP .)
    MULTIPLICACAO   reduce using rule 20 (elem -> DUP .)
    RESTO           reduce using rule 20 (elem -> DUP .)
    POTENCIA        reduce using rule 20 (elem -> DUP .)
    DIVIDE_BY_2     reduce using rule 20 (elem -> DUP .)
    EQUAL           reduce using rule 20 (elem -> DUP .)
    SUP             reduce using rule 20 (elem -> DUP .)
    SUPEQUAL        reduce using rule 20 (elem -> DUP .)
    INF             reduce using rule 20 (elem -> DUP .)
    INFEQUAL        reduce using rule 20 (elem -> DUP .)
    $end            reduce using rule 20 (elem -> DUP .)
    ELSE            reduce using rule 20 (elem -> DUP .)
    THEN            reduce using rule 20 (elem -> DUP .)
    LOOP            reduce using rule 20 (elem -> DUP .)
    PONTOVIRGULA    reduce using rule 20 (elem -> DUP .)


state 21

    (21) elem -> 2DUP .

    2PONTOS         reduce using rule 21 (elem -> 2DUP .)
    NUM             reduce using rule 21 (elem -> 2DUP .)
    POINT           reduce using rule 21 (elem -> 2DUP .)
    PRINTSTRING     reduce using rule 21 (elem -> 2DUP .)
    SWAP            reduce using rule 21 (elem -> 2DUP .)
    CR              reduce using rule 21 (elem -> 2DUP .)
    EMIT            reduce using rule 21 (elem -> 2DUP .)
    CHAR            reduce using rule 21 (elem -> 2DUP .)
    SPACES          reduce using rule 21 (elem -> 2DUP .)
    SPACE           reduce using rule 21 (elem -> 2DUP .)
    KEY             reduce using rule 21 (elem -> 2DUP .)
    DUP             reduce using rule 21 (elem -> 2DUP .)
    2DUP            reduce using rule 21 (elem -> 2DUP .)
    DROP            reduce using rule 21 (elem -> 2DUP .)
    I_COUNTER       reduce using rule 21 (elem -> 2DUP .)
    ID              reduce using rule 21 (elem -> 2DUP .)
    IF              reduce using rule 21 (elem -> 2DUP .)
    DO              reduce using rule 21 (elem -> 2DUP .)
    VAR_DECLARACAO  reduce using rule 21 (elem -> 2DUP .)
    VAR_ATRIBUICAO  reduce using rule 21 (elem -> 2DUP .)
    VAR_CHAMADA     reduce using rule 21 (elem -> 2DUP .)
    SOMA            reduce using rule 21 (elem -> 2DUP .)
    SUBTRACAO       reduce using rule 21 (elem -> 2DUP .)
    DIVISAO         reduce using rule 21 (elem -> 2DUP .)
    MULTIPLICACAO   reduce using rule 21 (elem -> 2DUP .)
    RESTO           reduce using rule 21 (elem -> 2DUP .)
    POTENCIA        reduce using rule 21 (elem -> 2DUP .)
    DIVIDE_BY_2     reduce using rule 21 (elem -> 2DUP .)
    EQUAL           reduce using rule 21 (elem -> 2DUP .)
    SUP             reduce using rule 21 (elem -> 2DUP .)
    SUPEQUAL        reduce using rule 21 (elem -> 2DUP .)
    INF             reduce using rule 21 (elem -> 2DUP .)
    INFEQUAL        reduce using rule 21 (elem -> 2DUP .)
    $end            reduce using rule 21 (elem -> 2DUP .)
    ELSE            reduce using rule 21 (elem -> 2DUP .)
    THEN            reduce using rule 21 (elem -> 2DUP .)
    LOOP            reduce using rule 21 (elem -> 2DUP .)
    PONTOVIRGULA    reduce using rule 21 (elem -> 2DUP .)


state 22

    (22) elem -> DROP .

    2PONTOS         reduce using rule 22 (elem -> DROP .)
    NUM             reduce using rule 22 (elem -> DROP .)
    POINT           reduce using rule 22 (elem -> DROP .)
    PRINTSTRING     reduce using rule 22 (elem -> DROP .)
    SWAP            reduce using rule 22 (elem -> DROP .)
    CR              reduce using rule 22 (elem -> DROP .)
    EMIT            reduce using rule 22 (elem -> DROP .)
    CHAR            reduce using rule 22 (elem -> DROP .)
    SPACES          reduce using rule 22 (elem -> DROP .)
    SPACE           reduce using rule 22 (elem -> DROP .)
    KEY             reduce using rule 22 (elem -> DROP .)
    DUP             reduce using rule 22 (elem -> DROP .)
    2DUP            reduce using rule 22 (elem -> DROP .)
    DROP            reduce using rule 22 (elem -> DROP .)
    I_COUNTER       reduce using rule 22 (elem -> DROP .)
    ID              reduce using rule 22 (elem -> DROP .)
    IF              reduce using rule 22 (elem -> DROP .)
    DO              reduce using rule 22 (elem -> DROP .)
    VAR_DECLARACAO  reduce using rule 22 (elem -> DROP .)
    VAR_ATRIBUICAO  reduce using rule 22 (elem -> DROP .)
    VAR_CHAMADA     reduce using rule 22 (elem -> DROP .)
    SOMA            reduce using rule 22 (elem -> DROP .)
    SUBTRACAO       reduce using rule 22 (elem -> DROP .)
    DIVISAO         reduce using rule 22 (elem -> DROP .)
    MULTIPLICACAO   reduce using rule 22 (elem -> DROP .)
    RESTO           reduce using rule 22 (elem -> DROP .)
    POTENCIA        reduce using rule 22 (elem -> DROP .)
    DIVIDE_BY_2     reduce using rule 22 (elem -> DROP .)
    EQUAL           reduce using rule 22 (elem -> DROP .)
    SUP             reduce using rule 22 (elem -> DROP .)
    SUPEQUAL        reduce using rule 22 (elem -> DROP .)
    INF             reduce using rule 22 (elem -> DROP .)
    INFEQUAL        reduce using rule 22 (elem -> DROP .)
    $end            reduce using rule 22 (elem -> DROP .)
    ELSE            reduce using rule 22 (elem -> DROP .)
    THEN            reduce using rule 22 (elem -> DROP .)
    LOOP            reduce using rule 22 (elem -> DROP .)
    PONTOVIRGULA    reduce using rule 22 (elem -> DROP .)


state 23

    (23) elem -> I_COUNTER .

    2PONTOS         reduce using rule 23 (elem -> I_COUNTER .)
    NUM             reduce using rule 23 (elem -> I_COUNTER .)
    POINT           reduce using rule 23 (elem -> I_COUNTER .)
    PRINTSTRING     reduce using rule 23 (elem -> I_COUNTER .)
    SWAP            reduce using rule 23 (elem -> I_COUNTER .)
    CR              reduce using rule 23 (elem -> I_COUNTER .)
    EMIT            reduce using rule 23 (elem -> I_COUNTER .)
    CHAR            reduce using rule 23 (elem -> I_COUNTER .)
    SPACES          reduce using rule 23 (elem -> I_COUNTER .)
    SPACE           reduce using rule 23 (elem -> I_COUNTER .)
    KEY             reduce using rule 23 (elem -> I_COUNTER .)
    DUP             reduce using rule 23 (elem -> I_COUNTER .)
    2DUP            reduce using rule 23 (elem -> I_COUNTER .)
    DROP            reduce using rule 23 (elem -> I_COUNTER .)
    I_COUNTER       reduce using rule 23 (elem -> I_COUNTER .)
    ID              reduce using rule 23 (elem -> I_COUNTER .)
    IF              reduce using rule 23 (elem -> I_COUNTER .)
    DO              reduce using rule 23 (elem -> I_COUNTER .)
    VAR_DECLARACAO  reduce using rule 23 (elem -> I_COUNTER .)
    VAR_ATRIBUICAO  reduce using rule 23 (elem -> I_COUNTER .)
    VAR_CHAMADA     reduce using rule 23 (elem -> I_COUNTER .)
    SOMA            reduce using rule 23 (elem -> I_COUNTER .)
    SUBTRACAO       reduce using rule 23 (elem -> I_COUNTER .)
    DIVISAO         reduce using rule 23 (elem -> I_COUNTER .)
    MULTIPLICACAO   reduce using rule 23 (elem -> I_COUNTER .)
    RESTO           reduce using rule 23 (elem -> I_COUNTER .)
    POTENCIA        reduce using rule 23 (elem -> I_COUNTER .)
    DIVIDE_BY_2     reduce using rule 23 (elem -> I_COUNTER .)
    EQUAL           reduce using rule 23 (elem -> I_COUNTER .)
    SUP             reduce using rule 23 (elem -> I_COUNTER .)
    SUPEQUAL        reduce using rule 23 (elem -> I_COUNTER .)
    INF             reduce using rule 23 (elem -> I_COUNTER .)
    INFEQUAL        reduce using rule 23 (elem -> I_COUNTER .)
    $end            reduce using rule 23 (elem -> I_COUNTER .)
    ELSE            reduce using rule 23 (elem -> I_COUNTER .)
    THEN            reduce using rule 23 (elem -> I_COUNTER .)
    LOOP            reduce using rule 23 (elem -> I_COUNTER .)
    PONTOVIRGULA    reduce using rule 23 (elem -> I_COUNTER .)


state 24

    (24) elem -> ID .

    2PONTOS         reduce using rule 24 (elem -> ID .)
    NUM             reduce using rule 24 (elem -> ID .)
    POINT           reduce using rule 24 (elem -> ID .)
    PRINTSTRING     reduce using rule 24 (elem -> ID .)
    SWAP            reduce using rule 24 (elem -> ID .)
    CR              reduce using rule 24 (elem -> ID .)
    EMIT            reduce using rule 24 (elem -> ID .)
    CHAR            reduce using rule 24 (elem -> ID .)
    SPACES          reduce using rule 24 (elem -> ID .)
    SPACE           reduce using rule 24 (elem -> ID .)
    KEY             reduce using rule 24 (elem -> ID .)
    DUP             reduce using rule 24 (elem -> ID .)
    2DUP            reduce using rule 24 (elem -> ID .)
    DROP            reduce using rule 24 (elem -> ID .)
    I_COUNTER       reduce using rule 24 (elem -> ID .)
    ID              reduce using rule 24 (elem -> ID .)
    IF              reduce using rule 24 (elem -> ID .)
    DO              reduce using rule 24 (elem -> ID .)
    VAR_DECLARACAO  reduce using rule 24 (elem -> ID .)
    VAR_ATRIBUICAO  reduce using rule 24 (elem -> ID .)
    VAR_CHAMADA     reduce using rule 24 (elem -> ID .)
    SOMA            reduce using rule 24 (elem -> ID .)
    SUBTRACAO       reduce using rule 24 (elem -> ID .)
    DIVISAO         reduce using rule 24 (elem -> ID .)
    MULTIPLICACAO   reduce using rule 24 (elem -> ID .)
    RESTO           reduce using rule 24 (elem -> ID .)
    POTENCIA        reduce using rule 24 (elem -> ID .)
    DIVIDE_BY_2     reduce using rule 24 (elem -> ID .)
    EQUAL           reduce using rule 24 (elem -> ID .)
    SUP             reduce using rule 24 (elem -> ID .)
    SUPEQUAL        reduce using rule 24 (elem -> ID .)
    INF             reduce using rule 24 (elem -> ID .)
    INFEQUAL        reduce using rule 24 (elem -> ID .)
    $end            reduce using rule 24 (elem -> ID .)
    ELSE            reduce using rule 24 (elem -> ID .)
    THEN            reduce using rule 24 (elem -> ID .)
    LOOP            reduce using rule 24 (elem -> ID .)
    PONTOVIRGULA    reduce using rule 24 (elem -> ID .)


state 25

    (37) condicional -> IF . input ELSE input THEN input
    (38) condicional -> IF . input THEN input
    (1) input -> . input linha
    (2) input -> . empty
    (43) empty -> .

    ELSE            reduce using rule 43 (empty -> .)
    THEN            reduce using rule 43 (empty -> .)
    2PONTOS         reduce using rule 43 (empty -> .)
    NUM             reduce using rule 43 (empty -> .)
    POINT           reduce using rule 43 (empty -> .)
    PRINTSTRING     reduce using rule 43 (empty -> .)
    SWAP            reduce using rule 43 (empty -> .)
    CR              reduce using rule 43 (empty -> .)
    EMIT            reduce using rule 43 (empty -> .)
    CHAR            reduce using rule 43 (empty -> .)
    SPACES          reduce using rule 43 (empty -> .)
    SPACE           reduce using rule 43 (empty -> .)
    KEY             reduce using rule 43 (empty -> .)
    DUP             reduce using rule 43 (empty -> .)
    2DUP            reduce using rule 43 (empty -> .)
    DROP            reduce using rule 43 (empty -> .)
    I_COUNTER       reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    VAR_DECLARACAO  reduce using rule 43 (empty -> .)
    VAR_ATRIBUICAO  reduce using rule 43 (empty -> .)
    VAR_CHAMADA     reduce using rule 43 (empty -> .)
    SOMA            reduce using rule 43 (empty -> .)
    SUBTRACAO       reduce using rule 43 (empty -> .)
    DIVISAO         reduce using rule 43 (empty -> .)
    MULTIPLICACAO   reduce using rule 43 (empty -> .)
    RESTO           reduce using rule 43 (empty -> .)
    POTENCIA        reduce using rule 43 (empty -> .)
    DIVIDE_BY_2     reduce using rule 43 (empty -> .)
    EQUAL           reduce using rule 43 (empty -> .)
    SUP             reduce using rule 43 (empty -> .)
    SUPEQUAL        reduce using rule 43 (empty -> .)
    INF             reduce using rule 43 (empty -> .)
    INFEQUAL        reduce using rule 43 (empty -> .)

    input                          shift and go to state 44
    empty                          shift and go to state 2

state 26

    (39) ciclo -> DO . input LOOP
    (1) input -> . input linha
    (2) input -> . empty
    (43) empty -> .

    LOOP            reduce using rule 43 (empty -> .)
    2PONTOS         reduce using rule 43 (empty -> .)
    NUM             reduce using rule 43 (empty -> .)
    POINT           reduce using rule 43 (empty -> .)
    PRINTSTRING     reduce using rule 43 (empty -> .)
    SWAP            reduce using rule 43 (empty -> .)
    CR              reduce using rule 43 (empty -> .)
    EMIT            reduce using rule 43 (empty -> .)
    CHAR            reduce using rule 43 (empty -> .)
    SPACES          reduce using rule 43 (empty -> .)
    SPACE           reduce using rule 43 (empty -> .)
    KEY             reduce using rule 43 (empty -> .)
    DUP             reduce using rule 43 (empty -> .)
    2DUP            reduce using rule 43 (empty -> .)
    DROP            reduce using rule 43 (empty -> .)
    I_COUNTER       reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    VAR_DECLARACAO  reduce using rule 43 (empty -> .)
    VAR_ATRIBUICAO  reduce using rule 43 (empty -> .)
    VAR_CHAMADA     reduce using rule 43 (empty -> .)
    SOMA            reduce using rule 43 (empty -> .)
    SUBTRACAO       reduce using rule 43 (empty -> .)
    DIVISAO         reduce using rule 43 (empty -> .)
    MULTIPLICACAO   reduce using rule 43 (empty -> .)
    RESTO           reduce using rule 43 (empty -> .)
    POTENCIA        reduce using rule 43 (empty -> .)
    DIVIDE_BY_2     reduce using rule 43 (empty -> .)
    EQUAL           reduce using rule 43 (empty -> .)
    SUP             reduce using rule 43 (empty -> .)
    SUPEQUAL        reduce using rule 43 (empty -> .)
    INF             reduce using rule 43 (empty -> .)
    INFEQUAL        reduce using rule 43 (empty -> .)

    input                          shift and go to state 45
    empty                          shift and go to state 2

state 27

    (40) variaveis -> VAR_DECLARACAO .

    2PONTOS         reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    NUM             reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    POINT           reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    PRINTSTRING     reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    SWAP            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    CR              reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    EMIT            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    CHAR            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    SPACES          reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    SPACE           reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    KEY             reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    DUP             reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    2DUP            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    DROP            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    I_COUNTER       reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    ID              reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    IF              reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    DO              reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    VAR_DECLARACAO  reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    VAR_ATRIBUICAO  reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    VAR_CHAMADA     reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    SOMA            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    SUBTRACAO       reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    DIVISAO         reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    MULTIPLICACAO   reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    RESTO           reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    POTENCIA        reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    DIVIDE_BY_2     reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    EQUAL           reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    SUP             reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    SUPEQUAL        reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    INF             reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    INFEQUAL        reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    $end            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    ELSE            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    THEN            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    LOOP            reduce using rule 40 (variaveis -> VAR_DECLARACAO .)
    PONTOVIRGULA    reduce using rule 40 (variaveis -> VAR_DECLARACAO .)


state 28

    (41) variaveis -> VAR_ATRIBUICAO .

    2PONTOS         reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    NUM             reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    POINT           reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    PRINTSTRING     reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    SWAP            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    CR              reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    EMIT            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    CHAR            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    SPACES          reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    SPACE           reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    KEY             reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    DUP             reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    2DUP            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    DROP            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    I_COUNTER       reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    ID              reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    IF              reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    DO              reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    VAR_DECLARACAO  reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    VAR_ATRIBUICAO  reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    VAR_CHAMADA     reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    SOMA            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    SUBTRACAO       reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    DIVISAO         reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    MULTIPLICACAO   reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    RESTO           reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    POTENCIA        reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    DIVIDE_BY_2     reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    EQUAL           reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    SUP             reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    SUPEQUAL        reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    INF             reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    INFEQUAL        reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    $end            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    ELSE            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    THEN            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    LOOP            reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)
    PONTOVIRGULA    reduce using rule 41 (variaveis -> VAR_ATRIBUICAO .)


state 29

    (42) variaveis -> VAR_CHAMADA .

    2PONTOS         reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    NUM             reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    POINT           reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    PRINTSTRING     reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    SWAP            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    CR              reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    EMIT            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    CHAR            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    SPACES          reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    SPACE           reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    KEY             reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    DUP             reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    2DUP            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    DROP            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    I_COUNTER       reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    ID              reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    IF              reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    DO              reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    VAR_DECLARACAO  reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    VAR_ATRIBUICAO  reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    VAR_CHAMADA     reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    SOMA            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    SUBTRACAO       reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    DIVISAO         reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    MULTIPLICACAO   reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    RESTO           reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    POTENCIA        reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    DIVIDE_BY_2     reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    EQUAL           reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    SUP             reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    SUPEQUAL        reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    INF             reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    INFEQUAL        reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    $end            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    ELSE            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    THEN            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    LOOP            reduce using rule 42 (variaveis -> VAR_CHAMADA .)
    PONTOVIRGULA    reduce using rule 42 (variaveis -> VAR_CHAMADA .)


state 30

    (25) operador -> SOMA .

    2PONTOS         reduce using rule 25 (operador -> SOMA .)
    NUM             reduce using rule 25 (operador -> SOMA .)
    POINT           reduce using rule 25 (operador -> SOMA .)
    PRINTSTRING     reduce using rule 25 (operador -> SOMA .)
    SWAP            reduce using rule 25 (operador -> SOMA .)
    CR              reduce using rule 25 (operador -> SOMA .)
    EMIT            reduce using rule 25 (operador -> SOMA .)
    CHAR            reduce using rule 25 (operador -> SOMA .)
    SPACES          reduce using rule 25 (operador -> SOMA .)
    SPACE           reduce using rule 25 (operador -> SOMA .)
    KEY             reduce using rule 25 (operador -> SOMA .)
    DUP             reduce using rule 25 (operador -> SOMA .)
    2DUP            reduce using rule 25 (operador -> SOMA .)
    DROP            reduce using rule 25 (operador -> SOMA .)
    I_COUNTER       reduce using rule 25 (operador -> SOMA .)
    ID              reduce using rule 25 (operador -> SOMA .)
    IF              reduce using rule 25 (operador -> SOMA .)
    DO              reduce using rule 25 (operador -> SOMA .)
    VAR_DECLARACAO  reduce using rule 25 (operador -> SOMA .)
    VAR_ATRIBUICAO  reduce using rule 25 (operador -> SOMA .)
    VAR_CHAMADA     reduce using rule 25 (operador -> SOMA .)
    SOMA            reduce using rule 25 (operador -> SOMA .)
    SUBTRACAO       reduce using rule 25 (operador -> SOMA .)
    DIVISAO         reduce using rule 25 (operador -> SOMA .)
    MULTIPLICACAO   reduce using rule 25 (operador -> SOMA .)
    RESTO           reduce using rule 25 (operador -> SOMA .)
    POTENCIA        reduce using rule 25 (operador -> SOMA .)
    DIVIDE_BY_2     reduce using rule 25 (operador -> SOMA .)
    EQUAL           reduce using rule 25 (operador -> SOMA .)
    SUP             reduce using rule 25 (operador -> SOMA .)
    SUPEQUAL        reduce using rule 25 (operador -> SOMA .)
    INF             reduce using rule 25 (operador -> SOMA .)
    INFEQUAL        reduce using rule 25 (operador -> SOMA .)
    $end            reduce using rule 25 (operador -> SOMA .)
    ELSE            reduce using rule 25 (operador -> SOMA .)
    THEN            reduce using rule 25 (operador -> SOMA .)
    LOOP            reduce using rule 25 (operador -> SOMA .)
    PONTOVIRGULA    reduce using rule 25 (operador -> SOMA .)


state 31

    (26) operador -> SUBTRACAO .

    2PONTOS         reduce using rule 26 (operador -> SUBTRACAO .)
    NUM             reduce using rule 26 (operador -> SUBTRACAO .)
    POINT           reduce using rule 26 (operador -> SUBTRACAO .)
    PRINTSTRING     reduce using rule 26 (operador -> SUBTRACAO .)
    SWAP            reduce using rule 26 (operador -> SUBTRACAO .)
    CR              reduce using rule 26 (operador -> SUBTRACAO .)
    EMIT            reduce using rule 26 (operador -> SUBTRACAO .)
    CHAR            reduce using rule 26 (operador -> SUBTRACAO .)
    SPACES          reduce using rule 26 (operador -> SUBTRACAO .)
    SPACE           reduce using rule 26 (operador -> SUBTRACAO .)
    KEY             reduce using rule 26 (operador -> SUBTRACAO .)
    DUP             reduce using rule 26 (operador -> SUBTRACAO .)
    2DUP            reduce using rule 26 (operador -> SUBTRACAO .)
    DROP            reduce using rule 26 (operador -> SUBTRACAO .)
    I_COUNTER       reduce using rule 26 (operador -> SUBTRACAO .)
    ID              reduce using rule 26 (operador -> SUBTRACAO .)
    IF              reduce using rule 26 (operador -> SUBTRACAO .)
    DO              reduce using rule 26 (operador -> SUBTRACAO .)
    VAR_DECLARACAO  reduce using rule 26 (operador -> SUBTRACAO .)
    VAR_ATRIBUICAO  reduce using rule 26 (operador -> SUBTRACAO .)
    VAR_CHAMADA     reduce using rule 26 (operador -> SUBTRACAO .)
    SOMA            reduce using rule 26 (operador -> SUBTRACAO .)
    SUBTRACAO       reduce using rule 26 (operador -> SUBTRACAO .)
    DIVISAO         reduce using rule 26 (operador -> SUBTRACAO .)
    MULTIPLICACAO   reduce using rule 26 (operador -> SUBTRACAO .)
    RESTO           reduce using rule 26 (operador -> SUBTRACAO .)
    POTENCIA        reduce using rule 26 (operador -> SUBTRACAO .)
    DIVIDE_BY_2     reduce using rule 26 (operador -> SUBTRACAO .)
    EQUAL           reduce using rule 26 (operador -> SUBTRACAO .)
    SUP             reduce using rule 26 (operador -> SUBTRACAO .)
    SUPEQUAL        reduce using rule 26 (operador -> SUBTRACAO .)
    INF             reduce using rule 26 (operador -> SUBTRACAO .)
    INFEQUAL        reduce using rule 26 (operador -> SUBTRACAO .)
    $end            reduce using rule 26 (operador -> SUBTRACAO .)
    ELSE            reduce using rule 26 (operador -> SUBTRACAO .)
    THEN            reduce using rule 26 (operador -> SUBTRACAO .)
    LOOP            reduce using rule 26 (operador -> SUBTRACAO .)
    PONTOVIRGULA    reduce using rule 26 (operador -> SUBTRACAO .)


state 32

    (27) operador -> DIVISAO .

    2PONTOS         reduce using rule 27 (operador -> DIVISAO .)
    NUM             reduce using rule 27 (operador -> DIVISAO .)
    POINT           reduce using rule 27 (operador -> DIVISAO .)
    PRINTSTRING     reduce using rule 27 (operador -> DIVISAO .)
    SWAP            reduce using rule 27 (operador -> DIVISAO .)
    CR              reduce using rule 27 (operador -> DIVISAO .)
    EMIT            reduce using rule 27 (operador -> DIVISAO .)
    CHAR            reduce using rule 27 (operador -> DIVISAO .)
    SPACES          reduce using rule 27 (operador -> DIVISAO .)
    SPACE           reduce using rule 27 (operador -> DIVISAO .)
    KEY             reduce using rule 27 (operador -> DIVISAO .)
    DUP             reduce using rule 27 (operador -> DIVISAO .)
    2DUP            reduce using rule 27 (operador -> DIVISAO .)
    DROP            reduce using rule 27 (operador -> DIVISAO .)
    I_COUNTER       reduce using rule 27 (operador -> DIVISAO .)
    ID              reduce using rule 27 (operador -> DIVISAO .)
    IF              reduce using rule 27 (operador -> DIVISAO .)
    DO              reduce using rule 27 (operador -> DIVISAO .)
    VAR_DECLARACAO  reduce using rule 27 (operador -> DIVISAO .)
    VAR_ATRIBUICAO  reduce using rule 27 (operador -> DIVISAO .)
    VAR_CHAMADA     reduce using rule 27 (operador -> DIVISAO .)
    SOMA            reduce using rule 27 (operador -> DIVISAO .)
    SUBTRACAO       reduce using rule 27 (operador -> DIVISAO .)
    DIVISAO         reduce using rule 27 (operador -> DIVISAO .)
    MULTIPLICACAO   reduce using rule 27 (operador -> DIVISAO .)
    RESTO           reduce using rule 27 (operador -> DIVISAO .)
    POTENCIA        reduce using rule 27 (operador -> DIVISAO .)
    DIVIDE_BY_2     reduce using rule 27 (operador -> DIVISAO .)
    EQUAL           reduce using rule 27 (operador -> DIVISAO .)
    SUP             reduce using rule 27 (operador -> DIVISAO .)
    SUPEQUAL        reduce using rule 27 (operador -> DIVISAO .)
    INF             reduce using rule 27 (operador -> DIVISAO .)
    INFEQUAL        reduce using rule 27 (operador -> DIVISAO .)
    $end            reduce using rule 27 (operador -> DIVISAO .)
    ELSE            reduce using rule 27 (operador -> DIVISAO .)
    THEN            reduce using rule 27 (operador -> DIVISAO .)
    LOOP            reduce using rule 27 (operador -> DIVISAO .)
    PONTOVIRGULA    reduce using rule 27 (operador -> DIVISAO .)


state 33

    (28) operador -> MULTIPLICACAO .

    2PONTOS         reduce using rule 28 (operador -> MULTIPLICACAO .)
    NUM             reduce using rule 28 (operador -> MULTIPLICACAO .)
    POINT           reduce using rule 28 (operador -> MULTIPLICACAO .)
    PRINTSTRING     reduce using rule 28 (operador -> MULTIPLICACAO .)
    SWAP            reduce using rule 28 (operador -> MULTIPLICACAO .)
    CR              reduce using rule 28 (operador -> MULTIPLICACAO .)
    EMIT            reduce using rule 28 (operador -> MULTIPLICACAO .)
    CHAR            reduce using rule 28 (operador -> MULTIPLICACAO .)
    SPACES          reduce using rule 28 (operador -> MULTIPLICACAO .)
    SPACE           reduce using rule 28 (operador -> MULTIPLICACAO .)
    KEY             reduce using rule 28 (operador -> MULTIPLICACAO .)
    DUP             reduce using rule 28 (operador -> MULTIPLICACAO .)
    2DUP            reduce using rule 28 (operador -> MULTIPLICACAO .)
    DROP            reduce using rule 28 (operador -> MULTIPLICACAO .)
    I_COUNTER       reduce using rule 28 (operador -> MULTIPLICACAO .)
    ID              reduce using rule 28 (operador -> MULTIPLICACAO .)
    IF              reduce using rule 28 (operador -> MULTIPLICACAO .)
    DO              reduce using rule 28 (operador -> MULTIPLICACAO .)
    VAR_DECLARACAO  reduce using rule 28 (operador -> MULTIPLICACAO .)
    VAR_ATRIBUICAO  reduce using rule 28 (operador -> MULTIPLICACAO .)
    VAR_CHAMADA     reduce using rule 28 (operador -> MULTIPLICACAO .)
    SOMA            reduce using rule 28 (operador -> MULTIPLICACAO .)
    SUBTRACAO       reduce using rule 28 (operador -> MULTIPLICACAO .)
    DIVISAO         reduce using rule 28 (operador -> MULTIPLICACAO .)
    MULTIPLICACAO   reduce using rule 28 (operador -> MULTIPLICACAO .)
    RESTO           reduce using rule 28 (operador -> MULTIPLICACAO .)
    POTENCIA        reduce using rule 28 (operador -> MULTIPLICACAO .)
    DIVIDE_BY_2     reduce using rule 28 (operador -> MULTIPLICACAO .)
    EQUAL           reduce using rule 28 (operador -> MULTIPLICACAO .)
    SUP             reduce using rule 28 (operador -> MULTIPLICACAO .)
    SUPEQUAL        reduce using rule 28 (operador -> MULTIPLICACAO .)
    INF             reduce using rule 28 (operador -> MULTIPLICACAO .)
    INFEQUAL        reduce using rule 28 (operador -> MULTIPLICACAO .)
    $end            reduce using rule 28 (operador -> MULTIPLICACAO .)
    ELSE            reduce using rule 28 (operador -> MULTIPLICACAO .)
    THEN            reduce using rule 28 (operador -> MULTIPLICACAO .)
    LOOP            reduce using rule 28 (operador -> MULTIPLICACAO .)
    PONTOVIRGULA    reduce using rule 28 (operador -> MULTIPLICACAO .)


state 34

    (29) operador -> RESTO .

    2PONTOS         reduce using rule 29 (operador -> RESTO .)
    NUM             reduce using rule 29 (operador -> RESTO .)
    POINT           reduce using rule 29 (operador -> RESTO .)
    PRINTSTRING     reduce using rule 29 (operador -> RESTO .)
    SWAP            reduce using rule 29 (operador -> RESTO .)
    CR              reduce using rule 29 (operador -> RESTO .)
    EMIT            reduce using rule 29 (operador -> RESTO .)
    CHAR            reduce using rule 29 (operador -> RESTO .)
    SPACES          reduce using rule 29 (operador -> RESTO .)
    SPACE           reduce using rule 29 (operador -> RESTO .)
    KEY             reduce using rule 29 (operador -> RESTO .)
    DUP             reduce using rule 29 (operador -> RESTO .)
    2DUP            reduce using rule 29 (operador -> RESTO .)
    DROP            reduce using rule 29 (operador -> RESTO .)
    I_COUNTER       reduce using rule 29 (operador -> RESTO .)
    ID              reduce using rule 29 (operador -> RESTO .)
    IF              reduce using rule 29 (operador -> RESTO .)
    DO              reduce using rule 29 (operador -> RESTO .)
    VAR_DECLARACAO  reduce using rule 29 (operador -> RESTO .)
    VAR_ATRIBUICAO  reduce using rule 29 (operador -> RESTO .)
    VAR_CHAMADA     reduce using rule 29 (operador -> RESTO .)
    SOMA            reduce using rule 29 (operador -> RESTO .)
    SUBTRACAO       reduce using rule 29 (operador -> RESTO .)
    DIVISAO         reduce using rule 29 (operador -> RESTO .)
    MULTIPLICACAO   reduce using rule 29 (operador -> RESTO .)
    RESTO           reduce using rule 29 (operador -> RESTO .)
    POTENCIA        reduce using rule 29 (operador -> RESTO .)
    DIVIDE_BY_2     reduce using rule 29 (operador -> RESTO .)
    EQUAL           reduce using rule 29 (operador -> RESTO .)
    SUP             reduce using rule 29 (operador -> RESTO .)
    SUPEQUAL        reduce using rule 29 (operador -> RESTO .)
    INF             reduce using rule 29 (operador -> RESTO .)
    INFEQUAL        reduce using rule 29 (operador -> RESTO .)
    $end            reduce using rule 29 (operador -> RESTO .)
    ELSE            reduce using rule 29 (operador -> RESTO .)
    THEN            reduce using rule 29 (operador -> RESTO .)
    LOOP            reduce using rule 29 (operador -> RESTO .)
    PONTOVIRGULA    reduce using rule 29 (operador -> RESTO .)


state 35

    (30) operador -> POTENCIA .

    2PONTOS         reduce using rule 30 (operador -> POTENCIA .)
    NUM             reduce using rule 30 (operador -> POTENCIA .)
    POINT           reduce using rule 30 (operador -> POTENCIA .)
    PRINTSTRING     reduce using rule 30 (operador -> POTENCIA .)
    SWAP            reduce using rule 30 (operador -> POTENCIA .)
    CR              reduce using rule 30 (operador -> POTENCIA .)
    EMIT            reduce using rule 30 (operador -> POTENCIA .)
    CHAR            reduce using rule 30 (operador -> POTENCIA .)
    SPACES          reduce using rule 30 (operador -> POTENCIA .)
    SPACE           reduce using rule 30 (operador -> POTENCIA .)
    KEY             reduce using rule 30 (operador -> POTENCIA .)
    DUP             reduce using rule 30 (operador -> POTENCIA .)
    2DUP            reduce using rule 30 (operador -> POTENCIA .)
    DROP            reduce using rule 30 (operador -> POTENCIA .)
    I_COUNTER       reduce using rule 30 (operador -> POTENCIA .)
    ID              reduce using rule 30 (operador -> POTENCIA .)
    IF              reduce using rule 30 (operador -> POTENCIA .)
    DO              reduce using rule 30 (operador -> POTENCIA .)
    VAR_DECLARACAO  reduce using rule 30 (operador -> POTENCIA .)
    VAR_ATRIBUICAO  reduce using rule 30 (operador -> POTENCIA .)
    VAR_CHAMADA     reduce using rule 30 (operador -> POTENCIA .)
    SOMA            reduce using rule 30 (operador -> POTENCIA .)
    SUBTRACAO       reduce using rule 30 (operador -> POTENCIA .)
    DIVISAO         reduce using rule 30 (operador -> POTENCIA .)
    MULTIPLICACAO   reduce using rule 30 (operador -> POTENCIA .)
    RESTO           reduce using rule 30 (operador -> POTENCIA .)
    POTENCIA        reduce using rule 30 (operador -> POTENCIA .)
    DIVIDE_BY_2     reduce using rule 30 (operador -> POTENCIA .)
    EQUAL           reduce using rule 30 (operador -> POTENCIA .)
    SUP             reduce using rule 30 (operador -> POTENCIA .)
    SUPEQUAL        reduce using rule 30 (operador -> POTENCIA .)
    INF             reduce using rule 30 (operador -> POTENCIA .)
    INFEQUAL        reduce using rule 30 (operador -> POTENCIA .)
    $end            reduce using rule 30 (operador -> POTENCIA .)
    ELSE            reduce using rule 30 (operador -> POTENCIA .)
    THEN            reduce using rule 30 (operador -> POTENCIA .)
    LOOP            reduce using rule 30 (operador -> POTENCIA .)
    PONTOVIRGULA    reduce using rule 30 (operador -> POTENCIA .)


state 36

    (31) operador -> DIVIDE_BY_2 .

    2PONTOS         reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    NUM             reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    POINT           reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    PRINTSTRING     reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    SWAP            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    CR              reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    EMIT            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    CHAR            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    SPACES          reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    SPACE           reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    KEY             reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    DUP             reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    2DUP            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    DROP            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    I_COUNTER       reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    ID              reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    IF              reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    DO              reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    VAR_DECLARACAO  reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    VAR_ATRIBUICAO  reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    VAR_CHAMADA     reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    SOMA            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    SUBTRACAO       reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    DIVISAO         reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    MULTIPLICACAO   reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    RESTO           reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    POTENCIA        reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    DIVIDE_BY_2     reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    EQUAL           reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    SUP             reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    SUPEQUAL        reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    INF             reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    INFEQUAL        reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    $end            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    ELSE            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    THEN            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    LOOP            reduce using rule 31 (operador -> DIVIDE_BY_2 .)
    PONTOVIRGULA    reduce using rule 31 (operador -> DIVIDE_BY_2 .)


state 37

    (32) operador -> EQUAL .

    2PONTOS         reduce using rule 32 (operador -> EQUAL .)
    NUM             reduce using rule 32 (operador -> EQUAL .)
    POINT           reduce using rule 32 (operador -> EQUAL .)
    PRINTSTRING     reduce using rule 32 (operador -> EQUAL .)
    SWAP            reduce using rule 32 (operador -> EQUAL .)
    CR              reduce using rule 32 (operador -> EQUAL .)
    EMIT            reduce using rule 32 (operador -> EQUAL .)
    CHAR            reduce using rule 32 (operador -> EQUAL .)
    SPACES          reduce using rule 32 (operador -> EQUAL .)
    SPACE           reduce using rule 32 (operador -> EQUAL .)
    KEY             reduce using rule 32 (operador -> EQUAL .)
    DUP             reduce using rule 32 (operador -> EQUAL .)
    2DUP            reduce using rule 32 (operador -> EQUAL .)
    DROP            reduce using rule 32 (operador -> EQUAL .)
    I_COUNTER       reduce using rule 32 (operador -> EQUAL .)
    ID              reduce using rule 32 (operador -> EQUAL .)
    IF              reduce using rule 32 (operador -> EQUAL .)
    DO              reduce using rule 32 (operador -> EQUAL .)
    VAR_DECLARACAO  reduce using rule 32 (operador -> EQUAL .)
    VAR_ATRIBUICAO  reduce using rule 32 (operador -> EQUAL .)
    VAR_CHAMADA     reduce using rule 32 (operador -> EQUAL .)
    SOMA            reduce using rule 32 (operador -> EQUAL .)
    SUBTRACAO       reduce using rule 32 (operador -> EQUAL .)
    DIVISAO         reduce using rule 32 (operador -> EQUAL .)
    MULTIPLICACAO   reduce using rule 32 (operador -> EQUAL .)
    RESTO           reduce using rule 32 (operador -> EQUAL .)
    POTENCIA        reduce using rule 32 (operador -> EQUAL .)
    DIVIDE_BY_2     reduce using rule 32 (operador -> EQUAL .)
    EQUAL           reduce using rule 32 (operador -> EQUAL .)
    SUP             reduce using rule 32 (operador -> EQUAL .)
    SUPEQUAL        reduce using rule 32 (operador -> EQUAL .)
    INF             reduce using rule 32 (operador -> EQUAL .)
    INFEQUAL        reduce using rule 32 (operador -> EQUAL .)
    $end            reduce using rule 32 (operador -> EQUAL .)
    ELSE            reduce using rule 32 (operador -> EQUAL .)
    THEN            reduce using rule 32 (operador -> EQUAL .)
    LOOP            reduce using rule 32 (operador -> EQUAL .)
    PONTOVIRGULA    reduce using rule 32 (operador -> EQUAL .)


state 38

    (33) operador -> SUP .

    2PONTOS         reduce using rule 33 (operador -> SUP .)
    NUM             reduce using rule 33 (operador -> SUP .)
    POINT           reduce using rule 33 (operador -> SUP .)
    PRINTSTRING     reduce using rule 33 (operador -> SUP .)
    SWAP            reduce using rule 33 (operador -> SUP .)
    CR              reduce using rule 33 (operador -> SUP .)
    EMIT            reduce using rule 33 (operador -> SUP .)
    CHAR            reduce using rule 33 (operador -> SUP .)
    SPACES          reduce using rule 33 (operador -> SUP .)
    SPACE           reduce using rule 33 (operador -> SUP .)
    KEY             reduce using rule 33 (operador -> SUP .)
    DUP             reduce using rule 33 (operador -> SUP .)
    2DUP            reduce using rule 33 (operador -> SUP .)
    DROP            reduce using rule 33 (operador -> SUP .)
    I_COUNTER       reduce using rule 33 (operador -> SUP .)
    ID              reduce using rule 33 (operador -> SUP .)
    IF              reduce using rule 33 (operador -> SUP .)
    DO              reduce using rule 33 (operador -> SUP .)
    VAR_DECLARACAO  reduce using rule 33 (operador -> SUP .)
    VAR_ATRIBUICAO  reduce using rule 33 (operador -> SUP .)
    VAR_CHAMADA     reduce using rule 33 (operador -> SUP .)
    SOMA            reduce using rule 33 (operador -> SUP .)
    SUBTRACAO       reduce using rule 33 (operador -> SUP .)
    DIVISAO         reduce using rule 33 (operador -> SUP .)
    MULTIPLICACAO   reduce using rule 33 (operador -> SUP .)
    RESTO           reduce using rule 33 (operador -> SUP .)
    POTENCIA        reduce using rule 33 (operador -> SUP .)
    DIVIDE_BY_2     reduce using rule 33 (operador -> SUP .)
    EQUAL           reduce using rule 33 (operador -> SUP .)
    SUP             reduce using rule 33 (operador -> SUP .)
    SUPEQUAL        reduce using rule 33 (operador -> SUP .)
    INF             reduce using rule 33 (operador -> SUP .)
    INFEQUAL        reduce using rule 33 (operador -> SUP .)
    $end            reduce using rule 33 (operador -> SUP .)
    ELSE            reduce using rule 33 (operador -> SUP .)
    THEN            reduce using rule 33 (operador -> SUP .)
    LOOP            reduce using rule 33 (operador -> SUP .)
    PONTOVIRGULA    reduce using rule 33 (operador -> SUP .)


state 39

    (34) operador -> SUPEQUAL .

    2PONTOS         reduce using rule 34 (operador -> SUPEQUAL .)
    NUM             reduce using rule 34 (operador -> SUPEQUAL .)
    POINT           reduce using rule 34 (operador -> SUPEQUAL .)
    PRINTSTRING     reduce using rule 34 (operador -> SUPEQUAL .)
    SWAP            reduce using rule 34 (operador -> SUPEQUAL .)
    CR              reduce using rule 34 (operador -> SUPEQUAL .)
    EMIT            reduce using rule 34 (operador -> SUPEQUAL .)
    CHAR            reduce using rule 34 (operador -> SUPEQUAL .)
    SPACES          reduce using rule 34 (operador -> SUPEQUAL .)
    SPACE           reduce using rule 34 (operador -> SUPEQUAL .)
    KEY             reduce using rule 34 (operador -> SUPEQUAL .)
    DUP             reduce using rule 34 (operador -> SUPEQUAL .)
    2DUP            reduce using rule 34 (operador -> SUPEQUAL .)
    DROP            reduce using rule 34 (operador -> SUPEQUAL .)
    I_COUNTER       reduce using rule 34 (operador -> SUPEQUAL .)
    ID              reduce using rule 34 (operador -> SUPEQUAL .)
    IF              reduce using rule 34 (operador -> SUPEQUAL .)
    DO              reduce using rule 34 (operador -> SUPEQUAL .)
    VAR_DECLARACAO  reduce using rule 34 (operador -> SUPEQUAL .)
    VAR_ATRIBUICAO  reduce using rule 34 (operador -> SUPEQUAL .)
    VAR_CHAMADA     reduce using rule 34 (operador -> SUPEQUAL .)
    SOMA            reduce using rule 34 (operador -> SUPEQUAL .)
    SUBTRACAO       reduce using rule 34 (operador -> SUPEQUAL .)
    DIVISAO         reduce using rule 34 (operador -> SUPEQUAL .)
    MULTIPLICACAO   reduce using rule 34 (operador -> SUPEQUAL .)
    RESTO           reduce using rule 34 (operador -> SUPEQUAL .)
    POTENCIA        reduce using rule 34 (operador -> SUPEQUAL .)
    DIVIDE_BY_2     reduce using rule 34 (operador -> SUPEQUAL .)
    EQUAL           reduce using rule 34 (operador -> SUPEQUAL .)
    SUP             reduce using rule 34 (operador -> SUPEQUAL .)
    SUPEQUAL        reduce using rule 34 (operador -> SUPEQUAL .)
    INF             reduce using rule 34 (operador -> SUPEQUAL .)
    INFEQUAL        reduce using rule 34 (operador -> SUPEQUAL .)
    $end            reduce using rule 34 (operador -> SUPEQUAL .)
    ELSE            reduce using rule 34 (operador -> SUPEQUAL .)
    THEN            reduce using rule 34 (operador -> SUPEQUAL .)
    LOOP            reduce using rule 34 (operador -> SUPEQUAL .)
    PONTOVIRGULA    reduce using rule 34 (operador -> SUPEQUAL .)


state 40

    (35) operador -> INF .

    2PONTOS         reduce using rule 35 (operador -> INF .)
    NUM             reduce using rule 35 (operador -> INF .)
    POINT           reduce using rule 35 (operador -> INF .)
    PRINTSTRING     reduce using rule 35 (operador -> INF .)
    SWAP            reduce using rule 35 (operador -> INF .)
    CR              reduce using rule 35 (operador -> INF .)
    EMIT            reduce using rule 35 (operador -> INF .)
    CHAR            reduce using rule 35 (operador -> INF .)
    SPACES          reduce using rule 35 (operador -> INF .)
    SPACE           reduce using rule 35 (operador -> INF .)
    KEY             reduce using rule 35 (operador -> INF .)
    DUP             reduce using rule 35 (operador -> INF .)
    2DUP            reduce using rule 35 (operador -> INF .)
    DROP            reduce using rule 35 (operador -> INF .)
    I_COUNTER       reduce using rule 35 (operador -> INF .)
    ID              reduce using rule 35 (operador -> INF .)
    IF              reduce using rule 35 (operador -> INF .)
    DO              reduce using rule 35 (operador -> INF .)
    VAR_DECLARACAO  reduce using rule 35 (operador -> INF .)
    VAR_ATRIBUICAO  reduce using rule 35 (operador -> INF .)
    VAR_CHAMADA     reduce using rule 35 (operador -> INF .)
    SOMA            reduce using rule 35 (operador -> INF .)
    SUBTRACAO       reduce using rule 35 (operador -> INF .)
    DIVISAO         reduce using rule 35 (operador -> INF .)
    MULTIPLICACAO   reduce using rule 35 (operador -> INF .)
    RESTO           reduce using rule 35 (operador -> INF .)
    POTENCIA        reduce using rule 35 (operador -> INF .)
    DIVIDE_BY_2     reduce using rule 35 (operador -> INF .)
    EQUAL           reduce using rule 35 (operador -> INF .)
    SUP             reduce using rule 35 (operador -> INF .)
    SUPEQUAL        reduce using rule 35 (operador -> INF .)
    INF             reduce using rule 35 (operador -> INF .)
    INFEQUAL        reduce using rule 35 (operador -> INF .)
    $end            reduce using rule 35 (operador -> INF .)
    ELSE            reduce using rule 35 (operador -> INF .)
    THEN            reduce using rule 35 (operador -> INF .)
    LOOP            reduce using rule 35 (operador -> INF .)
    PONTOVIRGULA    reduce using rule 35 (operador -> INF .)


state 41

    (36) operador -> INFEQUAL .

    2PONTOS         reduce using rule 36 (operador -> INFEQUAL .)
    NUM             reduce using rule 36 (operador -> INFEQUAL .)
    POINT           reduce using rule 36 (operador -> INFEQUAL .)
    PRINTSTRING     reduce using rule 36 (operador -> INFEQUAL .)
    SWAP            reduce using rule 36 (operador -> INFEQUAL .)
    CR              reduce using rule 36 (operador -> INFEQUAL .)
    EMIT            reduce using rule 36 (operador -> INFEQUAL .)
    CHAR            reduce using rule 36 (operador -> INFEQUAL .)
    SPACES          reduce using rule 36 (operador -> INFEQUAL .)
    SPACE           reduce using rule 36 (operador -> INFEQUAL .)
    KEY             reduce using rule 36 (operador -> INFEQUAL .)
    DUP             reduce using rule 36 (operador -> INFEQUAL .)
    2DUP            reduce using rule 36 (operador -> INFEQUAL .)
    DROP            reduce using rule 36 (operador -> INFEQUAL .)
    I_COUNTER       reduce using rule 36 (operador -> INFEQUAL .)
    ID              reduce using rule 36 (operador -> INFEQUAL .)
    IF              reduce using rule 36 (operador -> INFEQUAL .)
    DO              reduce using rule 36 (operador -> INFEQUAL .)
    VAR_DECLARACAO  reduce using rule 36 (operador -> INFEQUAL .)
    VAR_ATRIBUICAO  reduce using rule 36 (operador -> INFEQUAL .)
    VAR_CHAMADA     reduce using rule 36 (operador -> INFEQUAL .)
    SOMA            reduce using rule 36 (operador -> INFEQUAL .)
    SUBTRACAO       reduce using rule 36 (operador -> INFEQUAL .)
    DIVISAO         reduce using rule 36 (operador -> INFEQUAL .)
    MULTIPLICACAO   reduce using rule 36 (operador -> INFEQUAL .)
    RESTO           reduce using rule 36 (operador -> INFEQUAL .)
    POTENCIA        reduce using rule 36 (operador -> INFEQUAL .)
    DIVIDE_BY_2     reduce using rule 36 (operador -> INFEQUAL .)
    EQUAL           reduce using rule 36 (operador -> INFEQUAL .)
    SUP             reduce using rule 36 (operador -> INFEQUAL .)
    SUPEQUAL        reduce using rule 36 (operador -> INFEQUAL .)
    INF             reduce using rule 36 (operador -> INFEQUAL .)
    INFEQUAL        reduce using rule 36 (operador -> INFEQUAL .)
    $end            reduce using rule 36 (operador -> INFEQUAL .)
    ELSE            reduce using rule 36 (operador -> INFEQUAL .)
    THEN            reduce using rule 36 (operador -> INFEQUAL .)
    LOOP            reduce using rule 36 (operador -> INFEQUAL .)
    PONTOVIRGULA    reduce using rule 36 (operador -> INFEQUAL .)


state 42

    (4) linha -> 2PONTOS funcao . input PONTOVIRGULA
    (1) input -> . input linha
    (2) input -> . empty
    (43) empty -> .

    PONTOVIRGULA    reduce using rule 43 (empty -> .)
    2PONTOS         reduce using rule 43 (empty -> .)
    NUM             reduce using rule 43 (empty -> .)
    POINT           reduce using rule 43 (empty -> .)
    PRINTSTRING     reduce using rule 43 (empty -> .)
    SWAP            reduce using rule 43 (empty -> .)
    CR              reduce using rule 43 (empty -> .)
    EMIT            reduce using rule 43 (empty -> .)
    CHAR            reduce using rule 43 (empty -> .)
    SPACES          reduce using rule 43 (empty -> .)
    SPACE           reduce using rule 43 (empty -> .)
    KEY             reduce using rule 43 (empty -> .)
    DUP             reduce using rule 43 (empty -> .)
    2DUP            reduce using rule 43 (empty -> .)
    DROP            reduce using rule 43 (empty -> .)
    I_COUNTER       reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    VAR_DECLARACAO  reduce using rule 43 (empty -> .)
    VAR_ATRIBUICAO  reduce using rule 43 (empty -> .)
    VAR_CHAMADA     reduce using rule 43 (empty -> .)
    SOMA            reduce using rule 43 (empty -> .)
    SUBTRACAO       reduce using rule 43 (empty -> .)
    DIVISAO         reduce using rule 43 (empty -> .)
    MULTIPLICACAO   reduce using rule 43 (empty -> .)
    RESTO           reduce using rule 43 (empty -> .)
    POTENCIA        reduce using rule 43 (empty -> .)
    DIVIDE_BY_2     reduce using rule 43 (empty -> .)
    EQUAL           reduce using rule 43 (empty -> .)
    SUP             reduce using rule 43 (empty -> .)
    SUPEQUAL        reduce using rule 43 (empty -> .)
    INF             reduce using rule 43 (empty -> .)
    INFEQUAL        reduce using rule 43 (empty -> .)

    input                          shift and go to state 46
    empty                          shift and go to state 2

state 43

    (8) funcao -> FUNCAO .

    PONTOVIRGULA    reduce using rule 8 (funcao -> FUNCAO .)
    2PONTOS         reduce using rule 8 (funcao -> FUNCAO .)
    NUM             reduce using rule 8 (funcao -> FUNCAO .)
    POINT           reduce using rule 8 (funcao -> FUNCAO .)
    PRINTSTRING     reduce using rule 8 (funcao -> FUNCAO .)
    SWAP            reduce using rule 8 (funcao -> FUNCAO .)
    CR              reduce using rule 8 (funcao -> FUNCAO .)
    EMIT            reduce using rule 8 (funcao -> FUNCAO .)
    CHAR            reduce using rule 8 (funcao -> FUNCAO .)
    SPACES          reduce using rule 8 (funcao -> FUNCAO .)
    SPACE           reduce using rule 8 (funcao -> FUNCAO .)
    KEY             reduce using rule 8 (funcao -> FUNCAO .)
    DUP             reduce using rule 8 (funcao -> FUNCAO .)
    2DUP            reduce using rule 8 (funcao -> FUNCAO .)
    DROP            reduce using rule 8 (funcao -> FUNCAO .)
    I_COUNTER       reduce using rule 8 (funcao -> FUNCAO .)
    ID              reduce using rule 8 (funcao -> FUNCAO .)
    IF              reduce using rule 8 (funcao -> FUNCAO .)
    DO              reduce using rule 8 (funcao -> FUNCAO .)
    VAR_DECLARACAO  reduce using rule 8 (funcao -> FUNCAO .)
    VAR_ATRIBUICAO  reduce using rule 8 (funcao -> FUNCAO .)
    VAR_CHAMADA     reduce using rule 8 (funcao -> FUNCAO .)
    SOMA            reduce using rule 8 (funcao -> FUNCAO .)
    SUBTRACAO       reduce using rule 8 (funcao -> FUNCAO .)
    DIVISAO         reduce using rule 8 (funcao -> FUNCAO .)
    MULTIPLICACAO   reduce using rule 8 (funcao -> FUNCAO .)
    RESTO           reduce using rule 8 (funcao -> FUNCAO .)
    POTENCIA        reduce using rule 8 (funcao -> FUNCAO .)
    DIVIDE_BY_2     reduce using rule 8 (funcao -> FUNCAO .)
    EQUAL           reduce using rule 8 (funcao -> FUNCAO .)
    SUP             reduce using rule 8 (funcao -> FUNCAO .)
    SUPEQUAL        reduce using rule 8 (funcao -> FUNCAO .)
    INF             reduce using rule 8 (funcao -> FUNCAO .)
    INFEQUAL        reduce using rule 8 (funcao -> FUNCAO .)


state 44

    (37) condicional -> IF input . ELSE input THEN input
    (38) condicional -> IF input . THEN input
    (1) input -> input . linha
    (3) linha -> . elem
    (4) linha -> . 2PONTOS funcao input PONTOVIRGULA
    (5) linha -> . condicional
    (6) linha -> . ciclo
    (7) linha -> . variaveis
    (9) elem -> . NUM
    (10) elem -> . operador
    (11) elem -> . POINT
    (12) elem -> . PRINTSTRING
    (13) elem -> . SWAP
    (14) elem -> . CR
    (15) elem -> . EMIT
    (16) elem -> . CHAR
    (17) elem -> . SPACES
    (18) elem -> . SPACE
    (19) elem -> . KEY
    (20) elem -> . DUP
    (21) elem -> . 2DUP
    (22) elem -> . DROP
    (23) elem -> . I_COUNTER
    (24) elem -> . ID
    (37) condicional -> . IF input ELSE input THEN input
    (38) condicional -> . IF input THEN input
    (39) ciclo -> . DO input LOOP
    (40) variaveis -> . VAR_DECLARACAO
    (41) variaveis -> . VAR_ATRIBUICAO
    (42) variaveis -> . VAR_CHAMADA
    (25) operador -> . SOMA
    (26) operador -> . SUBTRACAO
    (27) operador -> . DIVISAO
    (28) operador -> . MULTIPLICACAO
    (29) operador -> . RESTO
    (30) operador -> . POTENCIA
    (31) operador -> . DIVIDE_BY_2
    (32) operador -> . EQUAL
    (33) operador -> . SUP
    (34) operador -> . SUPEQUAL
    (35) operador -> . INF
    (36) operador -> . INFEQUAL

    ELSE            shift and go to state 47
    THEN            shift and go to state 48
    2PONTOS         shift and go to state 5
    NUM             shift and go to state 9
    POINT           shift and go to state 11
    PRINTSTRING     shift and go to state 12
    SWAP            shift and go to state 13
    CR              shift and go to state 14
    EMIT            shift and go to state 15
    CHAR            shift and go to state 16
    SPACES          shift and go to state 17
    SPACE           shift and go to state 18
    KEY             shift and go to state 19
    DUP             shift and go to state 20
    2DUP            shift and go to state 21
    DROP            shift and go to state 22
    I_COUNTER       shift and go to state 23
    ID              shift and go to state 24
    IF              shift and go to state 25
    DO              shift and go to state 26
    VAR_DECLARACAO  shift and go to state 27
    VAR_ATRIBUICAO  shift and go to state 28
    VAR_CHAMADA     shift and go to state 29
    SOMA            shift and go to state 30
    SUBTRACAO       shift and go to state 31
    DIVISAO         shift and go to state 32
    MULTIPLICACAO   shift and go to state 33
    RESTO           shift and go to state 34
    POTENCIA        shift and go to state 35
    DIVIDE_BY_2     shift and go to state 36
    EQUAL           shift and go to state 37
    SUP             shift and go to state 38
    SUPEQUAL        shift and go to state 39
    INF             shift and go to state 40
    INFEQUAL        shift and go to state 41

    linha                          shift and go to state 3
    elem                           shift and go to state 4
    condicional                    shift and go to state 6
    ciclo                          shift and go to state 7
    variaveis                      shift and go to state 8
    operador                       shift and go to state 10

state 45

    (39) ciclo -> DO input . LOOP
    (1) input -> input . linha
    (3) linha -> . elem
    (4) linha -> . 2PONTOS funcao input PONTOVIRGULA
    (5) linha -> . condicional
    (6) linha -> . ciclo
    (7) linha -> . variaveis
    (9) elem -> . NUM
    (10) elem -> . operador
    (11) elem -> . POINT
    (12) elem -> . PRINTSTRING
    (13) elem -> . SWAP
    (14) elem -> . CR
    (15) elem -> . EMIT
    (16) elem -> . CHAR
    (17) elem -> . SPACES
    (18) elem -> . SPACE
    (19) elem -> . KEY
    (20) elem -> . DUP
    (21) elem -> . 2DUP
    (22) elem -> . DROP
    (23) elem -> . I_COUNTER
    (24) elem -> . ID
    (37) condicional -> . IF input ELSE input THEN input
    (38) condicional -> . IF input THEN input
    (39) ciclo -> . DO input LOOP
    (40) variaveis -> . VAR_DECLARACAO
    (41) variaveis -> . VAR_ATRIBUICAO
    (42) variaveis -> . VAR_CHAMADA
    (25) operador -> . SOMA
    (26) operador -> . SUBTRACAO
    (27) operador -> . DIVISAO
    (28) operador -> . MULTIPLICACAO
    (29) operador -> . RESTO
    (30) operador -> . POTENCIA
    (31) operador -> . DIVIDE_BY_2
    (32) operador -> . EQUAL
    (33) operador -> . SUP
    (34) operador -> . SUPEQUAL
    (35) operador -> . INF
    (36) operador -> . INFEQUAL

    LOOP            shift and go to state 49
    2PONTOS         shift and go to state 5
    NUM             shift and go to state 9
    POINT           shift and go to state 11
    PRINTSTRING     shift and go to state 12
    SWAP            shift and go to state 13
    CR              shift and go to state 14
    EMIT            shift and go to state 15
    CHAR            shift and go to state 16
    SPACES          shift and go to state 17
    SPACE           shift and go to state 18
    KEY             shift and go to state 19
    DUP             shift and go to state 20
    2DUP            shift and go to state 21
    DROP            shift and go to state 22
    I_COUNTER       shift and go to state 23
    ID              shift and go to state 24
    IF              shift and go to state 25
    DO              shift and go to state 26
    VAR_DECLARACAO  shift and go to state 27
    VAR_ATRIBUICAO  shift and go to state 28
    VAR_CHAMADA     shift and go to state 29
    SOMA            shift and go to state 30
    SUBTRACAO       shift and go to state 31
    DIVISAO         shift and go to state 32
    MULTIPLICACAO   shift and go to state 33
    RESTO           shift and go to state 34
    POTENCIA        shift and go to state 35
    DIVIDE_BY_2     shift and go to state 36
    EQUAL           shift and go to state 37
    SUP             shift and go to state 38
    SUPEQUAL        shift and go to state 39
    INF             shift and go to state 40
    INFEQUAL        shift and go to state 41

    linha                          shift and go to state 3
    elem                           shift and go to state 4
    condicional                    shift and go to state 6
    ciclo                          shift and go to state 7
    variaveis                      shift and go to state 8
    operador                       shift and go to state 10

state 46

    (4) linha -> 2PONTOS funcao input . PONTOVIRGULA
    (1) input -> input . linha
    (3) linha -> . elem
    (4) linha -> . 2PONTOS funcao input PONTOVIRGULA
    (5) linha -> . condicional
    (6) linha -> . ciclo
    (7) linha -> . variaveis
    (9) elem -> . NUM
    (10) elem -> . operador
    (11) elem -> . POINT
    (12) elem -> . PRINTSTRING
    (13) elem -> . SWAP
    (14) elem -> . CR
    (15) elem -> . EMIT
    (16) elem -> . CHAR
    (17) elem -> . SPACES
    (18) elem -> . SPACE
    (19) elem -> . KEY
    (20) elem -> . DUP
    (21) elem -> . 2DUP
    (22) elem -> . DROP
    (23) elem -> . I_COUNTER
    (24) elem -> . ID
    (37) condicional -> . IF input ELSE input THEN input
    (38) condicional -> . IF input THEN input
    (39) ciclo -> . DO input LOOP
    (40) variaveis -> . VAR_DECLARACAO
    (41) variaveis -> . VAR_ATRIBUICAO
    (42) variaveis -> . VAR_CHAMADA
    (25) operador -> . SOMA
    (26) operador -> . SUBTRACAO
    (27) operador -> . DIVISAO
    (28) operador -> . MULTIPLICACAO
    (29) operador -> . RESTO
    (30) operador -> . POTENCIA
    (31) operador -> . DIVIDE_BY_2
    (32) operador -> . EQUAL
    (33) operador -> . SUP
    (34) operador -> . SUPEQUAL
    (35) operador -> . INF
    (36) operador -> . INFEQUAL

    PONTOVIRGULA    shift and go to state 50
    2PONTOS         shift and go to state 5
    NUM             shift and go to state 9
    POINT           shift and go to state 11
    PRINTSTRING     shift and go to state 12
    SWAP            shift and go to state 13
    CR              shift and go to state 14
    EMIT            shift and go to state 15
    CHAR            shift and go to state 16
    SPACES          shift and go to state 17
    SPACE           shift and go to state 18
    KEY             shift and go to state 19
    DUP             shift and go to state 20
    2DUP            shift and go to state 21
    DROP            shift and go to state 22
    I_COUNTER       shift and go to state 23
    ID              shift and go to state 24
    IF              shift and go to state 25
    DO              shift and go to state 26
    VAR_DECLARACAO  shift and go to state 27
    VAR_ATRIBUICAO  shift and go to state 28
    VAR_CHAMADA     shift and go to state 29
    SOMA            shift and go to state 30
    SUBTRACAO       shift and go to state 31
    DIVISAO         shift and go to state 32
    MULTIPLICACAO   shift and go to state 33
    RESTO           shift and go to state 34
    POTENCIA        shift and go to state 35
    DIVIDE_BY_2     shift and go to state 36
    EQUAL           shift and go to state 37
    SUP             shift and go to state 38
    SUPEQUAL        shift and go to state 39
    INF             shift and go to state 40
    INFEQUAL        shift and go to state 41

    linha                          shift and go to state 3
    elem                           shift and go to state 4
    condicional                    shift and go to state 6
    ciclo                          shift and go to state 7
    variaveis                      shift and go to state 8
    operador                       shift and go to state 10

state 47

    (37) condicional -> IF input ELSE . input THEN input
    (1) input -> . input linha
    (2) input -> . empty
    (43) empty -> .

    THEN            reduce using rule 43 (empty -> .)
    2PONTOS         reduce using rule 43 (empty -> .)
    NUM             reduce using rule 43 (empty -> .)
    POINT           reduce using rule 43 (empty -> .)
    PRINTSTRING     reduce using rule 43 (empty -> .)
    SWAP            reduce using rule 43 (empty -> .)
    CR              reduce using rule 43 (empty -> .)
    EMIT            reduce using rule 43 (empty -> .)
    CHAR            reduce using rule 43 (empty -> .)
    SPACES          reduce using rule 43 (empty -> .)
    SPACE           reduce using rule 43 (empty -> .)
    KEY             reduce using rule 43 (empty -> .)
    DUP             reduce using rule 43 (empty -> .)
    2DUP            reduce using rule 43 (empty -> .)
    DROP            reduce using rule 43 (empty -> .)
    I_COUNTER       reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    VAR_DECLARACAO  reduce using rule 43 (empty -> .)
    VAR_ATRIBUICAO  reduce using rule 43 (empty -> .)
    VAR_CHAMADA     reduce using rule 43 (empty -> .)
    SOMA            reduce using rule 43 (empty -> .)
    SUBTRACAO       reduce using rule 43 (empty -> .)
    DIVISAO         reduce using rule 43 (empty -> .)
    MULTIPLICACAO   reduce using rule 43 (empty -> .)
    RESTO           reduce using rule 43 (empty -> .)
    POTENCIA        reduce using rule 43 (empty -> .)
    DIVIDE_BY_2     reduce using rule 43 (empty -> .)
    EQUAL           reduce using rule 43 (empty -> .)
    SUP             reduce using rule 43 (empty -> .)
    SUPEQUAL        reduce using rule 43 (empty -> .)
    INF             reduce using rule 43 (empty -> .)
    INFEQUAL        reduce using rule 43 (empty -> .)

    input                          shift and go to state 51
    empty                          shift and go to state 2

state 48

    (38) condicional -> IF input THEN . input
    (1) input -> . input linha
    (2) input -> . empty
    (43) empty -> .

    2PONTOS         reduce using rule 43 (empty -> .)
    NUM             reduce using rule 43 (empty -> .)
    POINT           reduce using rule 43 (empty -> .)
    PRINTSTRING     reduce using rule 43 (empty -> .)
    SWAP            reduce using rule 43 (empty -> .)
    CR              reduce using rule 43 (empty -> .)
    EMIT            reduce using rule 43 (empty -> .)
    CHAR            reduce using rule 43 (empty -> .)
    SPACES          reduce using rule 43 (empty -> .)
    SPACE           reduce using rule 43 (empty -> .)
    KEY             reduce using rule 43 (empty -> .)
    DUP             reduce using rule 43 (empty -> .)
    2DUP            reduce using rule 43 (empty -> .)
    DROP            reduce using rule 43 (empty -> .)
    I_COUNTER       reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    VAR_DECLARACAO  reduce using rule 43 (empty -> .)
    VAR_ATRIBUICAO  reduce using rule 43 (empty -> .)
    VAR_CHAMADA     reduce using rule 43 (empty -> .)
    SOMA            reduce using rule 43 (empty -> .)
    SUBTRACAO       reduce using rule 43 (empty -> .)
    DIVISAO         reduce using rule 43 (empty -> .)
    MULTIPLICACAO   reduce using rule 43 (empty -> .)
    RESTO           reduce using rule 43 (empty -> .)
    POTENCIA        reduce using rule 43 (empty -> .)
    DIVIDE_BY_2     reduce using rule 43 (empty -> .)
    EQUAL           reduce using rule 43 (empty -> .)
    SUP             reduce using rule 43 (empty -> .)
    SUPEQUAL        reduce using rule 43 (empty -> .)
    INF             reduce using rule 43 (empty -> .)
    INFEQUAL        reduce using rule 43 (empty -> .)
    $end            reduce using rule 43 (empty -> .)
    ELSE            reduce using rule 43 (empty -> .)
    THEN            reduce using rule 43 (empty -> .)
    LOOP            reduce using rule 43 (empty -> .)
    PONTOVIRGULA    reduce using rule 43 (empty -> .)

    input                          shift and go to state 52
    empty                          shift and go to state 2

state 49

    (39) ciclo -> DO input LOOP .

    2PONTOS         reduce using rule 39 (ciclo -> DO input LOOP .)
    NUM             reduce using rule 39 (ciclo -> DO input LOOP .)
    POINT           reduce using rule 39 (ciclo -> DO input LOOP .)
    PRINTSTRING     reduce using rule 39 (ciclo -> DO input LOOP .)
    SWAP            reduce using rule 39 (ciclo -> DO input LOOP .)
    CR              reduce using rule 39 (ciclo -> DO input LOOP .)
    EMIT            reduce using rule 39 (ciclo -> DO input LOOP .)
    CHAR            reduce using rule 39 (ciclo -> DO input LOOP .)
    SPACES          reduce using rule 39 (ciclo -> DO input LOOP .)
    SPACE           reduce using rule 39 (ciclo -> DO input LOOP .)
    KEY             reduce using rule 39 (ciclo -> DO input LOOP .)
    DUP             reduce using rule 39 (ciclo -> DO input LOOP .)
    2DUP            reduce using rule 39 (ciclo -> DO input LOOP .)
    DROP            reduce using rule 39 (ciclo -> DO input LOOP .)
    I_COUNTER       reduce using rule 39 (ciclo -> DO input LOOP .)
    ID              reduce using rule 39 (ciclo -> DO input LOOP .)
    IF              reduce using rule 39 (ciclo -> DO input LOOP .)
    DO              reduce using rule 39 (ciclo -> DO input LOOP .)
    VAR_DECLARACAO  reduce using rule 39 (ciclo -> DO input LOOP .)
    VAR_ATRIBUICAO  reduce using rule 39 (ciclo -> DO input LOOP .)
    VAR_CHAMADA     reduce using rule 39 (ciclo -> DO input LOOP .)
    SOMA            reduce using rule 39 (ciclo -> DO input LOOP .)
    SUBTRACAO       reduce using rule 39 (ciclo -> DO input LOOP .)
    DIVISAO         reduce using rule 39 (ciclo -> DO input LOOP .)
    MULTIPLICACAO   reduce using rule 39 (ciclo -> DO input LOOP .)
    RESTO           reduce using rule 39 (ciclo -> DO input LOOP .)
    POTENCIA        reduce using rule 39 (ciclo -> DO input LOOP .)
    DIVIDE_BY_2     reduce using rule 39 (ciclo -> DO input LOOP .)
    EQUAL           reduce using rule 39 (ciclo -> DO input LOOP .)
    SUP             reduce using rule 39 (ciclo -> DO input LOOP .)
    SUPEQUAL        reduce using rule 39 (ciclo -> DO input LOOP .)
    INF             reduce using rule 39 (ciclo -> DO input LOOP .)
    INFEQUAL        reduce using rule 39 (ciclo -> DO input LOOP .)
    $end            reduce using rule 39 (ciclo -> DO input LOOP .)
    ELSE            reduce using rule 39 (ciclo -> DO input LOOP .)
    THEN            reduce using rule 39 (ciclo -> DO input LOOP .)
    LOOP            reduce using rule 39 (ciclo -> DO input LOOP .)
    PONTOVIRGULA    reduce using rule 39 (ciclo -> DO input LOOP .)


state 50

    (4) linha -> 2PONTOS funcao input PONTOVIRGULA .

    2PONTOS         reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    NUM             reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    POINT           reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    PRINTSTRING     reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    SWAP            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    CR              reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    EMIT            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    CHAR            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    SPACES          reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    SPACE           reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    KEY             reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    DUP             reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    2DUP            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    DROP            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    I_COUNTER       reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    ID              reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    IF              reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    DO              reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    VAR_DECLARACAO  reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    VAR_ATRIBUICAO  reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    VAR_CHAMADA     reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    SOMA            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    SUBTRACAO       reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    DIVISAO         reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    MULTIPLICACAO   reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    RESTO           reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    POTENCIA        reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    DIVIDE_BY_2     reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    EQUAL           reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    SUP             reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    SUPEQUAL        reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    INF             reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    INFEQUAL        reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    $end            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    ELSE            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    THEN            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    LOOP            reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)
    PONTOVIRGULA    reduce using rule 4 (linha -> 2PONTOS funcao input PONTOVIRGULA .)


state 51

    (37) condicional -> IF input ELSE input . THEN input
    (1) input -> input . linha
    (3) linha -> . elem
    (4) linha -> . 2PONTOS funcao input PONTOVIRGULA
    (5) linha -> . condicional
    (6) linha -> . ciclo
    (7) linha -> . variaveis
    (9) elem -> . NUM
    (10) elem -> . operador
    (11) elem -> . POINT
    (12) elem -> . PRINTSTRING
    (13) elem -> . SWAP
    (14) elem -> . CR
    (15) elem -> . EMIT
    (16) elem -> . CHAR
    (17) elem -> . SPACES
    (18) elem -> . SPACE
    (19) elem -> . KEY
    (20) elem -> . DUP
    (21) elem -> . 2DUP
    (22) elem -> . DROP
    (23) elem -> . I_COUNTER
    (24) elem -> . ID
    (37) condicional -> . IF input ELSE input THEN input
    (38) condicional -> . IF input THEN input
    (39) ciclo -> . DO input LOOP
    (40) variaveis -> . VAR_DECLARACAO
    (41) variaveis -> . VAR_ATRIBUICAO
    (42) variaveis -> . VAR_CHAMADA
    (25) operador -> . SOMA
    (26) operador -> . SUBTRACAO
    (27) operador -> . DIVISAO
    (28) operador -> . MULTIPLICACAO
    (29) operador -> . RESTO
    (30) operador -> . POTENCIA
    (31) operador -> . DIVIDE_BY_2
    (32) operador -> . EQUAL
    (33) operador -> . SUP
    (34) operador -> . SUPEQUAL
    (35) operador -> . INF
    (36) operador -> . INFEQUAL

    THEN            shift and go to state 53
    2PONTOS         shift and go to state 5
    NUM             shift and go to state 9
    POINT           shift and go to state 11
    PRINTSTRING     shift and go to state 12
    SWAP            shift and go to state 13
    CR              shift and go to state 14
    EMIT            shift and go to state 15
    CHAR            shift and go to state 16
    SPACES          shift and go to state 17
    SPACE           shift and go to state 18
    KEY             shift and go to state 19
    DUP             shift and go to state 20
    2DUP            shift and go to state 21
    DROP            shift and go to state 22
    I_COUNTER       shift and go to state 23
    ID              shift and go to state 24
    IF              shift and go to state 25
    DO              shift and go to state 26
    VAR_DECLARACAO  shift and go to state 27
    VAR_ATRIBUICAO  shift and go to state 28
    VAR_CHAMADA     shift and go to state 29
    SOMA            shift and go to state 30
    SUBTRACAO       shift and go to state 31
    DIVISAO         shift and go to state 32
    MULTIPLICACAO   shift and go to state 33
    RESTO           shift and go to state 34
    POTENCIA        shift and go to state 35
    DIVIDE_BY_2     shift and go to state 36
    EQUAL           shift and go to state 37
    SUP             shift and go to state 38
    SUPEQUAL        shift and go to state 39
    INF             shift and go to state 40
    INFEQUAL        shift and go to state 41

    linha                          shift and go to state 3
    elem                           shift and go to state 4
    condicional                    shift and go to state 6
    ciclo                          shift and go to state 7
    variaveis                      shift and go to state 8
    operador                       shift and go to state 10

state 52

    (38) condicional -> IF input THEN input .
    (1) input -> input . linha
    (3) linha -> . elem
    (4) linha -> . 2PONTOS funcao input PONTOVIRGULA
    (5) linha -> . condicional
    (6) linha -> . ciclo
    (7) linha -> . variaveis
    (9) elem -> . NUM
    (10) elem -> . operador
    (11) elem -> . POINT
    (12) elem -> . PRINTSTRING
    (13) elem -> . SWAP
    (14) elem -> . CR
    (15) elem -> . EMIT
    (16) elem -> . CHAR
    (17) elem -> . SPACES
    (18) elem -> . SPACE
    (19) elem -> . KEY
    (20) elem -> . DUP
    (21) elem -> . 2DUP
    (22) elem -> . DROP
    (23) elem -> . I_COUNTER
    (24) elem -> . ID
    (37) condicional -> . IF input ELSE input THEN input
    (38) condicional -> . IF input THEN input
    (39) ciclo -> . DO input LOOP
    (40) variaveis -> . VAR_DECLARACAO
    (41) variaveis -> . VAR_ATRIBUICAO
    (42) variaveis -> . VAR_CHAMADA
    (25) operador -> . SOMA
    (26) operador -> . SUBTRACAO
    (27) operador -> . DIVISAO
    (28) operador -> . MULTIPLICACAO
    (29) operador -> . RESTO
    (30) operador -> . POTENCIA
    (31) operador -> . DIVIDE_BY_2
    (32) operador -> . EQUAL
    (33) operador -> . SUP
    (34) operador -> . SUPEQUAL
    (35) operador -> . INF
    (36) operador -> . INFEQUAL

  ! shift/reduce conflict for 2PONTOS resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for POINT resolved as shift
  ! shift/reduce conflict for PRINTSTRING resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for CR resolved as shift
  ! shift/reduce conflict for EMIT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SPACES resolved as shift
  ! shift/reduce conflict for SPACE resolved as shift
  ! shift/reduce conflict for KEY resolved as shift
  ! shift/reduce conflict for DUP resolved as shift
  ! shift/reduce conflict for 2DUP resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! shift/reduce conflict for I_COUNTER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR_DECLARACAO resolved as shift
  ! shift/reduce conflict for VAR_ATRIBUICAO resolved as shift
  ! shift/reduce conflict for VAR_CHAMADA resolved as shift
  ! shift/reduce conflict for SOMA resolved as shift
  ! shift/reduce conflict for SUBTRACAO resolved as shift
  ! shift/reduce conflict for DIVISAO resolved as shift
  ! shift/reduce conflict for MULTIPLICACAO resolved as shift
  ! shift/reduce conflict for RESTO resolved as shift
  ! shift/reduce conflict for POTENCIA resolved as shift
  ! shift/reduce conflict for DIVIDE_BY_2 resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for SUP resolved as shift
  ! shift/reduce conflict for SUPEQUAL resolved as shift
  ! shift/reduce conflict for INF resolved as shift
  ! shift/reduce conflict for INFEQUAL resolved as shift
    $end            reduce using rule 38 (condicional -> IF input THEN input .)
    ELSE            reduce using rule 38 (condicional -> IF input THEN input .)
    THEN            reduce using rule 38 (condicional -> IF input THEN input .)
    LOOP            reduce using rule 38 (condicional -> IF input THEN input .)
    PONTOVIRGULA    reduce using rule 38 (condicional -> IF input THEN input .)
    2PONTOS         shift and go to state 5
    NUM             shift and go to state 9
    POINT           shift and go to state 11
    PRINTSTRING     shift and go to state 12
    SWAP            shift and go to state 13
    CR              shift and go to state 14
    EMIT            shift and go to state 15
    CHAR            shift and go to state 16
    SPACES          shift and go to state 17
    SPACE           shift and go to state 18
    KEY             shift and go to state 19
    DUP             shift and go to state 20
    2DUP            shift and go to state 21
    DROP            shift and go to state 22
    I_COUNTER       shift and go to state 23
    ID              shift and go to state 24
    IF              shift and go to state 25
    DO              shift and go to state 26
    VAR_DECLARACAO  shift and go to state 27
    VAR_ATRIBUICAO  shift and go to state 28
    VAR_CHAMADA     shift and go to state 29
    SOMA            shift and go to state 30
    SUBTRACAO       shift and go to state 31
    DIVISAO         shift and go to state 32
    MULTIPLICACAO   shift and go to state 33
    RESTO           shift and go to state 34
    POTENCIA        shift and go to state 35
    DIVIDE_BY_2     shift and go to state 36
    EQUAL           shift and go to state 37
    SUP             shift and go to state 38
    SUPEQUAL        shift and go to state 39
    INF             shift and go to state 40
    INFEQUAL        shift and go to state 41

  ! 2PONTOS         [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! NUM             [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! POINT           [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! PRINTSTRING     [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! SWAP            [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! CR              [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! EMIT            [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! CHAR            [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! SPACES          [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! SPACE           [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! KEY             [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! DUP             [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! 2DUP            [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! DROP            [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! I_COUNTER       [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! ID              [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! IF              [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! DO              [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! VAR_DECLARACAO  [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! VAR_ATRIBUICAO  [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! VAR_CHAMADA     [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! SOMA            [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! SUBTRACAO       [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! DIVISAO         [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! MULTIPLICACAO   [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! RESTO           [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! POTENCIA        [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! DIVIDE_BY_2     [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! EQUAL           [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! SUP             [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! SUPEQUAL        [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! INF             [ reduce using rule 38 (condicional -> IF input THEN input .) ]
  ! INFEQUAL        [ reduce using rule 38 (condicional -> IF input THEN input .) ]

    linha                          shift and go to state 3
    elem                           shift and go to state 4
    condicional                    shift and go to state 6
    ciclo                          shift and go to state 7
    variaveis                      shift and go to state 8
    operador                       shift and go to state 10

state 53

    (37) condicional -> IF input ELSE input THEN . input
    (1) input -> . input linha
    (2) input -> . empty
    (43) empty -> .

    2PONTOS         reduce using rule 43 (empty -> .)
    NUM             reduce using rule 43 (empty -> .)
    POINT           reduce using rule 43 (empty -> .)
    PRINTSTRING     reduce using rule 43 (empty -> .)
    SWAP            reduce using rule 43 (empty -> .)
    CR              reduce using rule 43 (empty -> .)
    EMIT            reduce using rule 43 (empty -> .)
    CHAR            reduce using rule 43 (empty -> .)
    SPACES          reduce using rule 43 (empty -> .)
    SPACE           reduce using rule 43 (empty -> .)
    KEY             reduce using rule 43 (empty -> .)
    DUP             reduce using rule 43 (empty -> .)
    2DUP            reduce using rule 43 (empty -> .)
    DROP            reduce using rule 43 (empty -> .)
    I_COUNTER       reduce using rule 43 (empty -> .)
    ID              reduce using rule 43 (empty -> .)
    IF              reduce using rule 43 (empty -> .)
    DO              reduce using rule 43 (empty -> .)
    VAR_DECLARACAO  reduce using rule 43 (empty -> .)
    VAR_ATRIBUICAO  reduce using rule 43 (empty -> .)
    VAR_CHAMADA     reduce using rule 43 (empty -> .)
    SOMA            reduce using rule 43 (empty -> .)
    SUBTRACAO       reduce using rule 43 (empty -> .)
    DIVISAO         reduce using rule 43 (empty -> .)
    MULTIPLICACAO   reduce using rule 43 (empty -> .)
    RESTO           reduce using rule 43 (empty -> .)
    POTENCIA        reduce using rule 43 (empty -> .)
    DIVIDE_BY_2     reduce using rule 43 (empty -> .)
    EQUAL           reduce using rule 43 (empty -> .)
    SUP             reduce using rule 43 (empty -> .)
    SUPEQUAL        reduce using rule 43 (empty -> .)
    INF             reduce using rule 43 (empty -> .)
    INFEQUAL        reduce using rule 43 (empty -> .)
    $end            reduce using rule 43 (empty -> .)
    ELSE            reduce using rule 43 (empty -> .)
    THEN            reduce using rule 43 (empty -> .)
    LOOP            reduce using rule 43 (empty -> .)
    PONTOVIRGULA    reduce using rule 43 (empty -> .)

    input                          shift and go to state 54
    empty                          shift and go to state 2

state 54

    (37) condicional -> IF input ELSE input THEN input .
    (1) input -> input . linha
    (3) linha -> . elem
    (4) linha -> . 2PONTOS funcao input PONTOVIRGULA
    (5) linha -> . condicional
    (6) linha -> . ciclo
    (7) linha -> . variaveis
    (9) elem -> . NUM
    (10) elem -> . operador
    (11) elem -> . POINT
    (12) elem -> . PRINTSTRING
    (13) elem -> . SWAP
    (14) elem -> . CR
    (15) elem -> . EMIT
    (16) elem -> . CHAR
    (17) elem -> . SPACES
    (18) elem -> . SPACE
    (19) elem -> . KEY
    (20) elem -> . DUP
    (21) elem -> . 2DUP
    (22) elem -> . DROP
    (23) elem -> . I_COUNTER
    (24) elem -> . ID
    (37) condicional -> . IF input ELSE input THEN input
    (38) condicional -> . IF input THEN input
    (39) ciclo -> . DO input LOOP
    (40) variaveis -> . VAR_DECLARACAO
    (41) variaveis -> . VAR_ATRIBUICAO
    (42) variaveis -> . VAR_CHAMADA
    (25) operador -> . SOMA
    (26) operador -> . SUBTRACAO
    (27) operador -> . DIVISAO
    (28) operador -> . MULTIPLICACAO
    (29) operador -> . RESTO
    (30) operador -> . POTENCIA
    (31) operador -> . DIVIDE_BY_2
    (32) operador -> . EQUAL
    (33) operador -> . SUP
    (34) operador -> . SUPEQUAL
    (35) operador -> . INF
    (36) operador -> . INFEQUAL

  ! shift/reduce conflict for 2PONTOS resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for POINT resolved as shift
  ! shift/reduce conflict for PRINTSTRING resolved as shift
  ! shift/reduce conflict for SWAP resolved as shift
  ! shift/reduce conflict for CR resolved as shift
  ! shift/reduce conflict for EMIT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SPACES resolved as shift
  ! shift/reduce conflict for SPACE resolved as shift
  ! shift/reduce conflict for KEY resolved as shift
  ! shift/reduce conflict for DUP resolved as shift
  ! shift/reduce conflict for 2DUP resolved as shift
  ! shift/reduce conflict for DROP resolved as shift
  ! shift/reduce conflict for I_COUNTER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VAR_DECLARACAO resolved as shift
  ! shift/reduce conflict for VAR_ATRIBUICAO resolved as shift
  ! shift/reduce conflict for VAR_CHAMADA resolved as shift
  ! shift/reduce conflict for SOMA resolved as shift
  ! shift/reduce conflict for SUBTRACAO resolved as shift
  ! shift/reduce conflict for DIVISAO resolved as shift
  ! shift/reduce conflict for MULTIPLICACAO resolved as shift
  ! shift/reduce conflict for RESTO resolved as shift
  ! shift/reduce conflict for POTENCIA resolved as shift
  ! shift/reduce conflict for DIVIDE_BY_2 resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for SUP resolved as shift
  ! shift/reduce conflict for SUPEQUAL resolved as shift
  ! shift/reduce conflict for INF resolved as shift
  ! shift/reduce conflict for INFEQUAL resolved as shift
    $end            reduce using rule 37 (condicional -> IF input ELSE input THEN input .)
    ELSE            reduce using rule 37 (condicional -> IF input ELSE input THEN input .)
    THEN            reduce using rule 37 (condicional -> IF input ELSE input THEN input .)
    LOOP            reduce using rule 37 (condicional -> IF input ELSE input THEN input .)
    PONTOVIRGULA    reduce using rule 37 (condicional -> IF input ELSE input THEN input .)
    2PONTOS         shift and go to state 5
    NUM             shift and go to state 9
    POINT           shift and go to state 11
    PRINTSTRING     shift and go to state 12
    SWAP            shift and go to state 13
    CR              shift and go to state 14
    EMIT            shift and go to state 15
    CHAR            shift and go to state 16
    SPACES          shift and go to state 17
    SPACE           shift and go to state 18
    KEY             shift and go to state 19
    DUP             shift and go to state 20
    2DUP            shift and go to state 21
    DROP            shift and go to state 22
    I_COUNTER       shift and go to state 23
    ID              shift and go to state 24
    IF              shift and go to state 25
    DO              shift and go to state 26
    VAR_DECLARACAO  shift and go to state 27
    VAR_ATRIBUICAO  shift and go to state 28
    VAR_CHAMADA     shift and go to state 29
    SOMA            shift and go to state 30
    SUBTRACAO       shift and go to state 31
    DIVISAO         shift and go to state 32
    MULTIPLICACAO   shift and go to state 33
    RESTO           shift and go to state 34
    POTENCIA        shift and go to state 35
    DIVIDE_BY_2     shift and go to state 36
    EQUAL           shift and go to state 37
    SUP             shift and go to state 38
    SUPEQUAL        shift and go to state 39
    INF             shift and go to state 40
    INFEQUAL        shift and go to state 41

  ! 2PONTOS         [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! NUM             [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! POINT           [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! PRINTSTRING     [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! SWAP            [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! CR              [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! EMIT            [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! CHAR            [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! SPACES          [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! SPACE           [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! KEY             [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! DUP             [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! 2DUP            [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! DROP            [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! I_COUNTER       [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! ID              [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! IF              [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! DO              [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! VAR_DECLARACAO  [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! VAR_ATRIBUICAO  [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! VAR_CHAMADA     [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! SOMA            [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! SUBTRACAO       [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! DIVISAO         [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! MULTIPLICACAO   [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! RESTO           [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! POTENCIA        [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! DIVIDE_BY_2     [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! EQUAL           [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! SUP             [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! SUPEQUAL        [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! INF             [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]
  ! INFEQUAL        [ reduce using rule 37 (condicional -> IF input ELSE input THEN input .) ]

    linha                          shift and go to state 3
    elem                           shift and go to state 4
    condicional                    shift and go to state 6
    ciclo                          shift and go to state 7
    variaveis                      shift and go to state 8
    operador                       shift and go to state 10
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for 2PONTOS in state 52 resolved as shift
WARNING: shift/reduce conflict for NUM in state 52 resolved as shift
WARNING: shift/reduce conflict for POINT in state 52 resolved as shift
WARNING: shift/reduce conflict for PRINTSTRING in state 52 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 52 resolved as shift
WARNING: shift/reduce conflict for CR in state 52 resolved as shift
WARNING: shift/reduce conflict for EMIT in state 52 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 52 resolved as shift
WARNING: shift/reduce conflict for SPACES in state 52 resolved as shift
WARNING: shift/reduce conflict for SPACE in state 52 resolved as shift
WARNING: shift/reduce conflict for KEY in state 52 resolved as shift
WARNING: shift/reduce conflict for DUP in state 52 resolved as shift
WARNING: shift/reduce conflict for 2DUP in state 52 resolved as shift
WARNING: shift/reduce conflict for DROP in state 52 resolved as shift
WARNING: shift/reduce conflict for I_COUNTER in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for DO in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR_DECLARACAO in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR_ATRIBUICAO in state 52 resolved as shift
WARNING: shift/reduce conflict for VAR_CHAMADA in state 52 resolved as shift
WARNING: shift/reduce conflict for SOMA in state 52 resolved as shift
WARNING: shift/reduce conflict for SUBTRACAO in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVISAO in state 52 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACAO in state 52 resolved as shift
WARNING: shift/reduce conflict for RESTO in state 52 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_BY_2 in state 52 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for SUP in state 52 resolved as shift
WARNING: shift/reduce conflict for SUPEQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for INF in state 52 resolved as shift
WARNING: shift/reduce conflict for INFEQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for 2PONTOS in state 54 resolved as shift
WARNING: shift/reduce conflict for NUM in state 54 resolved as shift
WARNING: shift/reduce conflict for POINT in state 54 resolved as shift
WARNING: shift/reduce conflict for PRINTSTRING in state 54 resolved as shift
WARNING: shift/reduce conflict for SWAP in state 54 resolved as shift
WARNING: shift/reduce conflict for CR in state 54 resolved as shift
WARNING: shift/reduce conflict for EMIT in state 54 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 54 resolved as shift
WARNING: shift/reduce conflict for SPACES in state 54 resolved as shift
WARNING: shift/reduce conflict for SPACE in state 54 resolved as shift
WARNING: shift/reduce conflict for KEY in state 54 resolved as shift
WARNING: shift/reduce conflict for DUP in state 54 resolved as shift
WARNING: shift/reduce conflict for 2DUP in state 54 resolved as shift
WARNING: shift/reduce conflict for DROP in state 54 resolved as shift
WARNING: shift/reduce conflict for I_COUNTER in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 54 resolved as shift
WARNING: shift/reduce conflict for DO in state 54 resolved as shift
WARNING: shift/reduce conflict for VAR_DECLARACAO in state 54 resolved as shift
WARNING: shift/reduce conflict for VAR_ATRIBUICAO in state 54 resolved as shift
WARNING: shift/reduce conflict for VAR_CHAMADA in state 54 resolved as shift
WARNING: shift/reduce conflict for SOMA in state 54 resolved as shift
WARNING: shift/reduce conflict for SUBTRACAO in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVISAO in state 54 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACAO in state 54 resolved as shift
WARNING: shift/reduce conflict for RESTO in state 54 resolved as shift
WARNING: shift/reduce conflict for POTENCIA in state 54 resolved as shift
WARNING: shift/reduce conflict for DIVIDE_BY_2 in state 54 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for SUP in state 54 resolved as shift
WARNING: shift/reduce conflict for SUPEQUAL in state 54 resolved as shift
WARNING: shift/reduce conflict for INF in state 54 resolved as shift
WARNING: shift/reduce conflict for INFEQUAL in state 54 resolved as shift
