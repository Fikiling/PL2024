
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVISAO MULTIPLICACAO NUM POTENCIA RESTO SOMA SUBTRACAOinput : input linhainput : emptylinha : expNumexpNum : expNum fatorexpNum : fatorfator : NUMfator : operadoroperador : SOMAoperador : SUBTRACAOoperador : DIVISAOoperador : MULTIPLICACAOoperador : RESTOoperador : POTENCIAempty :'
    
_lr_action_items = {'NUM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,6,-2,-1,6,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),'SOMA':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,8,-2,-1,8,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),'SUBTRACAO':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,9,-2,-1,9,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),'DIVISAO':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,10,-2,-1,10,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),'MULTIPLICACAO':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,11,-2,-1,11,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),'RESTO':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,12,-2,-1,12,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),'POTENCIA':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,13,-2,-1,13,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,],[-14,0,-2,-1,-3,-5,-6,-7,-8,-9,-10,-11,-12,-13,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'input':([0,],[1,]),'empty':([0,],[2,]),'linha':([1,],[3,]),'expNum':([1,],[4,]),'fator':([1,4,],[5,14,]),'operador':([1,4,],[7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> input","S'",1,None,None,None),
  ('input -> input linha','input',2,'p_input','analsintax_forth.py',20),
  ('input -> empty','input',1,'p_input_empty','analsintax_forth.py',24),
  ('linha -> expNum','linha',1,'p_linha_expNum','analsintax_forth.py',28),
  ('expNum -> expNum fator','expNum',2,'p_expNum_composta','analsintax_forth.py',32),
  ('expNum -> fator','expNum',1,'p_expNum_simples','analsintax_forth.py',36),
  ('fator -> NUM','fator',1,'p_fator_NUM','analsintax_forth.py',40),
  ('fator -> operador','fator',1,'p_fator_operador','analsintax_forth.py',44),
  ('operador -> SOMA','operador',1,'p_operador_SOMA','analsintax_forth.py',49),
  ('operador -> SUBTRACAO','operador',1,'p_operador_SUBTRACAO','analsintax_forth.py',53),
  ('operador -> DIVISAO','operador',1,'p_operador_DIVISAO','analsintax_forth.py',57),
  ('operador -> MULTIPLICACAO','operador',1,'p_operador_MULTIPLICACAO','analsintax_forth.py',61),
  ('operador -> RESTO','operador',1,'p_operador_RESTO','analsintax_forth.py',65),
  ('operador -> POTENCIA','operador',1,'p_operador_POTENCIA','analsintax_forth.py',69),
  ('empty -> <empty>','empty',0,'p_empty','analsintax_forth.py',73),
]
